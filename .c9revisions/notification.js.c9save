{"ts":1340323530542,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var ObjectId = require('./node_modules/mongoose').Types.ObjectId;\n\n\nvar saveFriendshipRequestToQueu = function(requester, requestee, requesterName, callback){\n   \n    var pendingNotification = {\n        type      : \"joinMasterCell\", //joinMasterCell, workoutCell \n        message   : requesterName + \" wants to be friend.\", //Name of person\n        refId     : requester,\n        date      : new Date()\n    }\n    \n    NotificationsReference.findOne({ id: requestee}, function(err, result){\n        if(err || result === null){\n            console.log(\"No document found or: \" + err + \" - Result:\" + result + \" for \" + requestee);\n            callback(\"Error in request (1). Stack Trace: \" + err);\n        }\n        else{\n            checkIfpending(requester, result.pending, function(mes){     \n                if(mes === \"isNotPending\"){\n                    result.pending.push(pendingNotification);\n                    result.pendingSize++;\n                    result.save(function (err) {\n                        if (err) { \n                            //console.log(\"In deleteEvent error(2)\");\n                            callback(\"Error in saving request(2). Stack Trace: \" + err); \n                        }\n                        else{\n                            //console.log(\"In deleteEvent Success\");\n                            callback(\"Success\");      \n                        }      \n                    });\n                }\n                else{\n                    callback(\"Request is already pending\");    \n                }\n            });\n        }\n    });\n    \n}\n\n\nvar saveCellRequestToQueu = function(requesterName, cellName, userId, cellId, callback){\n    \n    var pendingNotification = {\n        type      : \"cellInvite\", //joinMasterCell, workoutCell \n        message   : requesterName + \" has invited you to \" + cellName + \"'s cell\", //Name of person\n        refId     : userId,\n        refOId    : cellId, //cell Id\n        date      : new Date()\n    }\n    \n     NotificationsReference.findOne({ \"id\" : parseInt(userId), \"pending.refOId\" : ObjectId.fromString(cellId)}, function(err, result){\n        if(err){ \n            callback(\"Failed\");\n        }\n        else if(result === null){\n            //This means user hasnt filled in any result for this workout yet\n            NotificationsReference.update({ \"id\" : parseInt(userId)}, { $push: { pending: pendingNotification}, $inc: { unRead : 1 , pendingSize: 1 }}, function(err){\n                if(err){\n                    callback(\"Error in pushing not to found user. User:\" + result.members[i]);\n                }\n                else{ \n                    callback(\"Success\");\n                }\n            });\n        }\n        else{\n            callback(\"Existant\");\n        }\n     }); \n}\n\nvar removeCellInviteNotification = function(cellId, userId, callback){\n    \n    \n    NotificationsReference.findOne({ 'id' : userId, \"pending.refOId\" :  ObjectId.fromString(cellId)}, function(err, result){\n        if(err || result === null){\n            console.log(err + \" - \" + result);\n            callback('InvalidRequest');\n        }\n        else{\n            NotificationsReference.update({ \"id\" : userId}, { $pull: { pending: { refOId :  ObjectId.fromString(cellId)}}, $inc:{ pendingSize: -1 }}, function(err, result){\n                if(err || result === null){\n                    console.log(\"User isnt part of this cell. Stack: \" + err );\n                    callback(\"InvalidRequest\");\n                }\n                else{ //Memeber not in cell yet, so he can join\n                    callback(\"User removed\");\n                \n                }\n            });\n        }\n    });\n}\n\n//Go into someones notification colllection, and remove one from its _id\nvar removeUserNotification = function(notificationId, userId, callback){\n    \n    NotificationsReference.update({ \"id\" : userId}, { $pull: { pending: { _id :  ObjectId.fromString(notificationId)}}, $inc:{ pendingSize: -1 }}, function(err, result){\n        if(err || result === null){\n            console.log(\"Notification doesn't exist. Stack: \" + err );\n            callback(\"Notification doesn't exist. Stack: \" + err );\n        }\n        else{ //Memeber not in cell yet, so he can join\n            callback(\"Success\");\n        \n        }\n    });\n\n}\n\n//This will return the values in between the ranges in relation to the array size\n/*var getPendingNotifications = function(userId, rangeMin, rangeMax, callback){\n    \n    NotificationsReference.findOne({ id: userId}, function(err, result){\n        if(err || result === null){\n            //console.log(\"No document found or: \" + err);\n            callback(\"not instantiated\");\n        }\n        else{\n            var length = result.pending.length;\n            if(length === 0){\n                \n               callback([]); \n            }\n            else if(rangeMin < length || rangeMax > rangeMin){\n               var multiplicant = length / 10;\n               if(multiplicant <= 1){\n                   callback(result.pending);\n               }\n               else if(rangeMax <= 10){\n                  callback(result.pending.slice(0, 9));\n               }\n               else {\n                  callback(result.pending.slice(rangeMin, rangeMax));              \n               }\n                \n            }\n            else{\n              callback([]);     \n            }\n    \n        }\n    });\n    \n}\n*/\n\n\nvar getPendingNotifications = function(userId, page, callback){\n\n     NotificationsReference.find({ id: userId}, {pendingSize: 1}, function(err, result){\n         if(err || result === null){\n            callback(\"Failed\"); \n             \n         }\n         else if( result === 0){\n            callback(\"Empty\"); \n         }\n         else{\n            //console.log(result);\n            var arraySize = result[0].pendingSize;\n            var elementsPerPage = 10;\n            var numberOfPages = Math.ceil(arraySize / elementsPerPage);\n            var skip = Math.ceil(arraySize - (page * elementsPerPage));\n            if(skip < 0){\n                //var lastValidLocation = arraySize - ((page - 1) * elementsPerPage);\n                \n                elementsPerPage = elementsPerPage + skip ;\n                skip = 0;\n            }\n            //console.log(skip + \" - \" + numberOfPages + \" - \" + arraySize + \" - \" + JSON.stringify(result));\n            NotificationsReference.find({ id: userId}, { pending: { $slice: [skip, elementsPerPage]}}, function(err, result){\n               if(err || result === null){\n                    callback(\"Failed\");\n               }\n               else{\n                   callback(result[0].pending);\n               }\n            });\n         }\n     });\n}\n\n//This will go in the users pending notifications, remove the requesters id\n//and copy it to its friends list in the his general reference collection\nvar acceptPendingFriendship = function(userId, requesterId, callback){\n    \n    NotificationsReference.findOne({ id: userId}, function(err, result){\n        if(err || result === null){\n            callback(\"Could not accept notification. Stack: \" + err);\n        }\n        else{\n            var deletedRefId = 'unchanged';\n            for(i = 0; i < result.pending.length; i++){\n             \n               if( result.pending[i].refId === requesterId){\n                    //console.log(deletedRefId);\n                    deletedRefId = result.pending.splice(i, 1);\n                    result.pendingSize--;\n                    //console.log(deletedRefId + \" - \" + JSON.stringify(result));\n                    result.save(function (err) {\n                        if (err) { \n                            callback(\"Error in saving request(2). Stack Trace: \" + err); \n                        }\n                        else{\n                            GeneralReference.findOne({ id: userId}, function(err, result){\n                                if(err || result === null){\n                                    callback(\"Error in saving request(3). Stack Trace: \" + err);  \n                                }\n                                else{\n                                    result.friends.push(parseInt(requesterId));    \n                                    result.save(function (err){\n                                        if (err) { \n                                            callback(\"Error in saving request(2). Stack Trace: \" + err); \n                                        }\n                                        else{\n                                            GeneralReference.findOne({ id: requesterId}, function(err, result){\n                                                if(err || result === null){\n                                                    callback(\"Error in saving request(3). Stack Trace: \" + err);  \n                                                }\n                                                else{\n                                                    result.friends.push(parseInt(userId));    \n                                                    result.save(function (err){\n                                                        if (err) { \n                                                            callback(\"Error in saving request(2). Stack Trace: \" + err); \n                                                        }\n                                                        else{\n                                                            callback(\"Success\");    \n                                                        \n                                                        }\n                                                    });\n                                                }\n                                            });\n                                        }\n                                    });\n                                }\n                            }); \n                        }\n                    });\n                }\n            }\n        }\n    });  \n}\n\nvar declinePendingFriendship = function(userId, requesterId, callback){\n    \n    NotificationsReference.findOne({ id: userId}, function(err, result){\n        if(err || result === null){\n            callback(\"Could not accept notification. Stack: \" + err);\n        }\n        else{\n            var deletedRefId = 'unchanged';\n            var cbResponse = \"Couldnt find user pending notifications\";\n            var inIf = false;\n            for(i = 0; i < result.pending.length; i++){\n               if( result.pending[i].refId === requesterId && result.pending[i].type === \"joinMasterCell\"){\n                    inIf = true;\n                    deletedRefId = result.pending.splice(i, 1);\n                    result.pendingSize--; \n                    result.save(function (err) {\n                        if (err) { \n                            callback(\"Error in saving request(1). Stack Trace: \" + err);\n                        }\n                        else{\n                            callback(\"Success\");\n                        }\n                    });\n                    break;\n               }\n            }\n            if(!inIf){\n                callback(cbResponse);\n            }\n        }\n    });  \n}\n\n\nvar sendNotificationToCellUsers = function(cellId, notification, callback){\n    //console.log('in not for users');\n    CellDetails.findOne({_id: cellId}, function(err, result){\n        if(err || result == null){\n            console.log(result + \" - \" + err);\n            callback(\"Can't send notification. Stack:\" + err);\n        }\n        else{\n            console.log(JSON.stringify(result));\n            for(i =0; i < result.members.length; i++){\n                //console.log( i  + \" user is \" + result.members[i]);\n                NotificationsReference.update({ \"id\" : result.members[i].fbid}, { $push: { pending: notification}, $inc: { unRead : 1 , pendingSize: 1 }}, function(err){\n                    if(err){\n                        console.log('update failed - ' + err);\n                        callback(\"Error in pushing not to found user. User:\" + result.members[i]);\n                    }\n                    else{ \n                        //console.log('update succes');\n                        callback(\"Success\");\n                    }\n                });\n            }\n        }      \n    });\n}\n\nvar sendNotificationToCell = function(cellId, newNotification, callback){\n    \n    CellDetails.update({ _id: cellId }, { $push: { notification: newNotification}}, function(err){\n         if(err){\n            callback(\"Can't send notification. Stack:\" + err);\n        }\n        else{\n            callback(\"Success\");\n        }\n    });\n    \n}\n\nvar getUnreadNotificationsCount = function(userId, callback){\n    \n    NotificationsReference.findOne({ id: userId }, function(err, results){\n        if(err || null){\n            //console.log(result + \" - \" + err);\n            callback(\"Failed\");\n        }\n        else{\n            callback(results.unRead);\n            \n        } \n    }); \n}\n\nvar resetUnreadNotificationsCount = function(userId, callback){\n    \n    NotificationsReference.update({ id: userId }, { $set: { unRead: 0}}, function(err){\n        if(err){\n            //console.log(result + \" - \" + err);\n            callback(\"Can't get unread notifications. Stack:\" + err);\n        }\n        else{\n            callback(\"Success\"); \n        } \n    }); \n}\n\nvar getCellNotifications = function(cellId, from, to, callback){\n    \n    CellDetails.find({_id: cellId }, {\"notification\" : {\"$slice\" : [parseInt(from), parseInt(to)]}}, function(err, result){\n        if(err || result === null){\n            //console.log(err);\n            callback(\"Error in notifications Cell. Stack: \" + err);\n        }\n        else{\n            callback(result);\n        }\n    });\n    \n}\n\n\nvar removeCellMessage = function(cellId, notificationId, callback){\n\n     CellDetails.update({_id: cellId }, { $pull: { notification: { _id :  ObjectId.fromString(notificationId)}}}, function(err, result){\n        if(err || result === null){\n            console.log(\"No such notification. Stack: \" + err );\n            callback(\"No such notification. Stack: \" + err);\n        }\n        else{ //Memeber not in cell yet, so he can join\n            callback(\"Success\");\n        \n        }\n    });     \n \n}\n\n\n//!---------------------- Private functions to this module------------------ //\n\nvar checkIfpending = function(requester, array, callback){\n    var callbackResult =  \"isNotPending\";\n    for(i = 0; i < array.length;i++){\n        if(array[i].type === \"joinMasterCell\" && array[i].refId === requester){\n            callbackResult = \"isPending\";\n            break;\n        }\n                \n    }\n    callback(callbackResult);\n}\n\nvar checkIfCellpending = function(cellId, array, callback){\n\n    for(i = 0; i < array.length;i++){\n        if(array[i].type === \"cellInvite\" && array[i].refOId === cellId){\n            callback(\"isPending\");\n            break;\n        }\n        else if(i === array.length - 1){\n             callbackResult(\"isNotPending\");\n        }\n        else{\n            \n        }       \n    }\n}\n\nvar pushToNotificationLog = function (error){\n    console.log('in push to not log'); \n    var newError = new Log();\n    newError.notificationError.push(error);\n    newError.save(function(err){\n        if(err) {\n            console.log('Cant save to notification error log'); \n        }\n        else{\n           \n        }\n    });\n    \n}\n\n// --------------------- Exports  -------------------------------------//\n\nexports.getCellNotifications = getCellNotifications;\nexports.saveFriendshipRequestToQueu = saveFriendshipRequestToQueu;\nexports.saveCellRequestToQueu = saveCellRequestToQueu;\nexports.getPendingNotifications = getPendingNotifications;\nexports.acceptPendingFriendship = acceptPendingFriendship;\nexports.declinePendingFriendship = declinePendingFriendship;\nexports.sendNotificationToCellUsers = sendNotificationToCellUsers;\nexports.sendNotificationToCell = sendNotificationToCell;\nexports.getUnreadNotificationsCount = getUnreadNotificationsCount;\nexports.resetUnreadNotificationsCount = resetUnreadNotificationsCount;\nexports.getCellNotifications = getCellNotifications;\nexports.removeCellInviteNotification = removeCellInviteNotification;\nexports.getPendingNotifications = getPendingNotifications;\nexports.removeCellMessage = removeCellMessage;\nexports.pushToNotificationLog = pushToNotificationLog;\nexports.removeUserNotification = removeUserNotification;"]],"start1":0,"start2":0,"length1":0,"length2":16493}]],"length":16493}
