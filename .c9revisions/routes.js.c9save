{"ts":1339985171630,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nvar mongooseLogic = require('./mongooseLogic');\nvar notification = require('./notification');\nvar searchEngine = require('./searchEngine');\nvar statisticsEngine = require('./statisticsEngine');\n\nmodule.exports = function(app) {\n    \n    //Clear current user session of our auth data\n    app.get('/logoff', function(req, res){\n        req.logout();\n    });\n    \n    app.get('/view/:htmlpage', function(req, res){\n        console.log(req.loggedIn);\n\n        if(req.loggedIn) {\n            res.sendfile('./views/' + req.params.htmlpage + '.html');\n        }\n        else{\n        \n          res.send('You need to be authenticated with a <a href=\"www.facebook.com\">Facebook</a> to access <a href=\"/\"> Workoutcell </a>');\n        \n        }\n    });\n    \n    //!!!!!--------------HTTP GET REQUEST ----------------!!!!!!!!\n    \n    //------RETREIVAL OF DATA ----------\n    \n    //retrieve a list containing objects with name, distance and reference of\n    //all users maps\n    app.get(\"/parcour/list/:userId\", function(req, res){\n     \n        mongooseLogic.getParcourList(req.params.userId,  function(data){\n         \n            //console.log(data);\n            res.json(JSON.stringify(data));\n         \n        });\n  \n\n    });\n    \n    //Retrieve a specific parcour. A parcour is the name, distance and actual \n    //gmap coordinates.\n    app.get(\"/parcour/:parcourId\", function(req, res){\n     \n    mongooseLogic.getParcour(req.params.parcourId, function(data){\n         \n         //console.log(\"routes.js level: \" + data);\n         res.json(data);\n         \n         });\n  \n\n    });\n    \n    app.get(\"/parcour/delete/:parcourId\", function(req, res){\n     \n        mongooseLogic.deleteParcour(req.params.parcourId, getLogedId(req), function(message){\n         \n            //console.log(\"routes.js level: \" + data);\n            if(message === \"Success\"){\n                res.json({ success: true, message:'Deleted course.'});\n            }\n            else{\n                res.json({ success: false, message:'Failed to delete course. ' + message});\n            }\n            \n        });\n    });\n    \n    \n    //retreive specific workout in database\n    app.get(\"/workout/:workoutid\", function(req, res){\n        \n        \n         mongooseLogic.getWorkout(req.params.workoutid, getLogedId(req), function(mes){\n\n            if(RealTypeOf(mes) === \"array\"){\n                res.json({ success: false, message:mes});\n            }\n            else{\n                res.json(mes);    \n            }\n         \n         });\n       \n    });\n    \n    //Retreive specific workout\n    app.get(\"/event/:year/:month/:userId\", function(req, res){\n    \n    \n        mongooseLogic.getMonthEvent(req.params.userId, req.params.year, \n            req.params.month, function(object){\n        \n            if(object === \"not instantiated\"){\n                \n                res.json({ success: false, message: 'No calendar events for this month'});    \n            }\n            else{\n                \n               res.json({ success: true, message: object}); \n            }\n        \n        });\n        \n    });\n    \n\n    \n    //!!!!!----------------Notifications Route ------------------------------///\n    //\n    //\n    //!!!!!!!----------------------------------------------------------------///\n    \n        \n    //Receive all what is in pending  notification queu of user, optimized version\n    app.get(\"/notification/queu/:userId/:page\", function(req, res){\n        //console.log(\"in get\");\n        if(isAllowed(req, req.params.userId) && is_int(req.params.page)){\n            notification.getPendingNotifications(req.params.userId, parseInt(req.params.page), \n                function(mongooseRes){\n                    if(mongooseRes === \"Failed\"){\n                        res.json({ success: false, message:\"Couldnt get pending notifications\"});\n                    }\n                    else if(mongooseRes === \"Empty\"){\n                        res.json({ success: true, message:[]});\n                    }\n                    else{   \n                        res.json({ success: true, message:mongooseRes});\n                    }\n            });\n                \n        }\n        else{\n            res.json({ success: false, message:'Invalid parameter sent'});\n        }\n   \n    });\n\n    \n    //Adds a notification to the users queu\n    app.get(\"/notification/add/:userId/:type/:target\", function(req, res){\n        \n        if(isAllowed(req, req.params.userId) && req.params.target !== req.params.userId){ //make sure user submitting request is the user\n             mongooseLogic.isUserAFriend(req.params.userId, req.params.target, function(bool){ //If user is a friend request ignored\n                console.log(bool);\n                if(req.params.type === \"joinMasterCell\" && !bool){\n                    notification.saveFriendshipRequestToQueu(req.params.userId, \n                        req.params.target, getLogedName(req), function(mongooseRes){\n                        if(mongooseRes === \"Success\"){\n                            res.json({ success: true, message:'Request sent to join Friends list.'});\n                        }\n                        else{   \n                            res.json({ success: false, message:mongooseRes});\n                        }\n                    });    \n                }\n                else{\n                    res.json({ success: false, message:'Invalid parameter sent'});\n                }\n            });\n        }\n        else{\n           res.json({ success: false, message:'Already friends, or invalid authorization'}); \n        }\n   \n    });\n\n    app.get(\"/notification/unread\", function(req, res){\n        notification.getUnreadNotificationsCount(parseInt(getLogedId(req)), function(mes){\n            if(mes !== \"Failed\"){\n                res.json({ success: true, message:mes});\n            }\n            else{\n                 res.json({ success: false, message:0});\n            } \n        });\n        \n    });\n    \n    app.get(\"/notification/unread/reset\", function(req, res){\n        notification.resetUnreadNotificationsCount(parseInt(getLogedId(req)), function(mes){\n            if(mes === \"Success\"){\n                res.json({ success: true, message:0});\n            }\n            else{\n                res.json({ success: false, message:\"Cant mark as read.\" + mes});\n            }   \n        });\n    });\n    \n    //Receive all what is in pending  notification queu of use \n    /*app.get(\"/notification/queu/:userId/:min/:max\", function(req, res){\n        \n        if(isAllowed(req, req.params.userId) && is_int(req.params.min) && is_int(req.params.max)){\n            \n            notification.getPendingNotifications(req.params.userId, parseInt(req.params.min), \n                parseInt(req.params.max), function(mongooseRes){\n                    if(mongooseRes === \"not instantiated\"){\n                        res.json({ success: false, message:\"Couldnt find information\"});\n                    }\n                    else{   \n                        res.json({ success: true, message:mongooseRes});\n                    }\n            });\n                \n        }\n        else{\n            res.json({ success: false, message:'Invalid parameter sent'});\n        }\n   \n    });*/\n\n    \n    //Send a response to either accepting or denying someone in your cell\n    app.get(\"/notification/joinMasterCell/:userId/:requester/:action\", function(req,res){\n        \n        if(isAllowed(req, req.params.userId) && (req.params.action === \"accept\" \n            || req.params.action=== \"decline\")){\n            \n            if(req.params.action === \"accept\"){\n                mongooseLogic.isUserAFriend(req.params.userId, req.params.requester, function(bool){\n                    if(bool){\n                        notification.declinePendingFriendship(req.params.userId, req.params.requester, function(mes){\n                            if(mes === \"Success\"){\n                                res.json({ success: true, message: \"User is already a friend.\"});\n                            }\n                            else{\n                                res.json({ success: false, message: mes});\n                            }\n                        });\n                    }\n                    else{\n                        notification.acceptPendingFriendship(req.params.userId, req.params.requester, function(mes){\n                            if(mes === \"Success\"){\n                                res.json({ success: true, message: \"Successfully added Friend to your cell\"});\n                            }\n                            else{\n                                res.json({ success: false, message: mes});\n                            }\n                        });\n                    }\n                });\n            }\n            else if(req.params.action === \"decline\"){\n                notification.declinePendingFriendship(req.params.userId, req.params.requester, function(mes){\n                    if(mes === \"Success\"){\n                        res.json({ success: true, message: \"Declined users frienship\"});\n                    }\n                    else{\n                        res.json({ success: false, message: mes});\n                    }\n             \n                });\n            }\n            else{\n                res.json({ success: false, message:'Invalid parameter sent (1)'}); \n             \n            }\n        \n        }\n        else{\n           res.json({ success: false, message:'Invalid parameter sent(2)'}); \n        }\n        \n    });\n    \n    app.get(\"/notification/cell/invite/:cellId/:response\", function(req, res){\n\n        notification.removeCellInviteNotification(req.params.cellId, getLogedId(req), function(mes){\n            if(mes === \"InvalidRequest\"){\n                res.json({ success: false, message:'Invalid request'});\n            }\n            else{\n                \n                if(req.params.response === \"accept\"){\n                    mongooseLogic.joinCell(req.params.cellId, getLogedId(req), getLogedName(req), function(mes2){\n                        if(mes2 !== \"Success\"){\n                            res.json({ success: false, message:'Failed to find join Cell.'});  \n                        }\n                        else{\n                            res.json({ success: true, message: 'You joined the cell'}); \n                        }  \n                    });\n                }\n                else{\n                   res.json({ success: true, message:'Declined cell invite'}); \n                }\n            }\n        });\n    });\n    \n    /*\n    app.get(\"/notifications/cell/:cellId/:from/:to\", function(req,res){\n        \n        mongooseLogic.getCellNotifications(req.params.cellId, req.params.from, req.params.to, function(mes){\n        \n            if(RealTypeOf(mes) !==  \"array\"){\n                res.json({ success: false, message:mes});   \n            }\n            else{\n                res.json({ success: true, message:mes});   \n            }\n        \n        });\n    \n    });*/\n    \n        \n    app.get(\"/notification/cell/message/:cellId/:message\", function(req, res){\n        \n        var newNotification = {\n            type      : 'newCellMessage', //joinMasterCell, workoutCell, broadcast\n            message   : getLogedName(req) + ' says: ' + req.params.message + '.', \n            refId     : getLogedId(req),\n            refOId    : \"\",  //cellId\n            date      : new Date()\n        }\n        \n        notification.sendNotificationToCell(req.params.cellId, newNotification, function(mes){\n            if(mes !== \"Success\"){\n               res.json({ success: false, message: 'Couldnt post message.'});\n            }\n            else{\n                res.json({ success: true, message:'Posted message to cell.'}); \n                \n                var newNotification = {\n                    type      : 'newCellMessage', //joinMasterCell, workoutCell, broadcast\n                    message   : getLogedName(req) + ' posted a message', //Name of person\n                    refId     : req.params.cellId,\n                    refOId    : getLogedId(req),  //cellId\n                    date      : new Date() \n                }\n\n                notification.sendNotificationToCellUsers(req.params.cellId, newNotification, function(res){\n                    if(res !== \"Success\"){\n                          notification.pushToNotificationLog(res + \" @ POST: /workout/cell/:cellId/:userId\");\n                    }\n                });\n\n            } \n        });\n    });\n    \n    app.get(\"/notification/user/remove/:notificationid\", function(req, res){\n        \n        notification.removeUserNotification(req.params.notificationid, getLogedId(req), function(mes){\n            if(mes === 'Success'){\n                res.json({ success: true, message:'Removed Notification'});\n            }\n            else{\n                res.json({ success: false, message: mes});\n            }\n        });\n        \n    });\n    \n    //!!!!!----------------Cell Routes  -------------------------------------///\n    //\n    //\n    //!!!!!!!----------------------------------------------------------------///\n    \n    \n    //Returns the users friend list, an array with their Facebook Ids\n    app.get(\"/cell/friends/:userId\", function(req,res){\n \n        mongooseLogic.getFriendList(req.params.userId, function(mes){\n            if(mes === \"Error\"){\n                res.json({ success: false, message:'Failed to find List.'});  \n            }\n            else if(mes === \"Empty\"){\n                res.json({ success: true, message:'You have no friend in your cell'});\n            }\n            else{\n                res.json({ success: true, message: mes}); \n            }\n        });\n         \n     });\n     \n     app.get(\"/cell/notification/remove/:cellid/:notificationid\", function(req, res){\n         \n        notification.removeCellMessage(req.params.cellid, req.params.notificationid, function(mes){\n             if(mes === \"Success\"){\n                res.json({ success: true, message: \"Removed message\"});   \n            }\n            else{\n                res.json({ success: false, message:mes});\n            }\n        });   \n     });\n     \n     app.get(\"/cell/join/:cellId\", function(req,res){\n        \n        mongooseLogic.joinCell(req.params.cellId, getLogedId(req), getLogedName(req), function(mes){\n            if(mes !== \"Success\"){\n                res.json({ success: false, message:'Failed to find join Cell.'});  \n            }\n            else{\n                res.json({ success: true, message: mes}); \n            }  \n        });\n     });\n     \n     app.get(\"/cell/quit/:cellId\", function(req, res){\n        mongooseLogic.quitCell(getLogedId(req), req.params.cellId, function(mes){\n            if(mes === \"Success\"){\n                res.json({ success: true, message: 'You have quit  the Cell'});\n            }\n            else{\n                res.json({ success: false, message:'Failed to quit Cell.' + mes});     \n            }  \n        });\n     });\n     \n    //returns all of a users cells\n    app.get(\"/cell/all/:userId\", function(req,res){\n       \n       mongooseLogic.getUsersCells(req.params.userId, function(mes){\n            if(mes === \"Error\"){\n                res.json({ success: false, message:'Failed to find Users Cells.'});  \n            }\n            else if(mes === \"Empty\"){\n                res.json({ success: true, message:'You are not part of any cells.'});\n            }\n            else{\n                res.json({ success: true, message: mes}); \n            }\n        });       \n    });\n    \n    //takes a objectid and returns workout for it\n    app.get(\"/cell/details/:cellId\", function(req, res){\n     \n        mongooseLogic.getCellDetails(req.params.cellId, function(mes){\n            if(mes === \"Error\"){\n                res.json({ success: false, message: \"An error happened in the request.\"});\n            }\n            else{\n                if(mes.isPrivate){\n                    if(mes.members.length !== 0){\n                        for(i=0; i < mes.members.length; i++){\n                            //console.log(typeof(getLogedId(req)) + \" vs \" + typeof(mes.members[i].fbid));\n                            //console.log(getLogedId(req) + \" vs \" + mes.members[i].fbid);\n                            if(parseInt(getLogedId(req)) === parseInt(mes.members[i].fbid)){\n                               res.json({ success: true, message: mes});\n                               break;\n                            }\n                            else if(i === mes.members.length - 1){ //When loop is doen send failure\n                                res.json({ success: true, message: \"This cell is private\"});\n                            }\n                            else{\n                                \n                            }\n                        } \n                    }\n                    else{\n                        res.json({ success: true, message: \"This cell is private\"});\n                    }\n                }\n                else{\n                    res.json({ success: true, message: mes});\n                }\n            } \n        });\n    });\n    \n    \n    app.get(\"/cell/coach/:cellId/:userId\",  function(req, res){\n        \n        mongooseLogic.isCellCoach(req.params.cellId, req.params.userId, function(mes){\n           if(mes === true || mes === false){\n               res.json({ success: true, message: mes});\n           }\n           else{\n               res.json({ success: false, message: \"No such cell or user.\"});\n           }\n\n        });      \n    });\n    \n    \n    app.get(\"/cell/event/:year/:month/:cellId\", function(req, res){\n\n        mongooseLogic.getCellMonthEvent(req.params.cellId, req.params.year, \n            req.params.month, function(object){\n        \n            if(object === \"not instantiated\"){\n                \n                res.json({ success: false, message: 'No calendar events for this month'});    \n            }\n            else{\n                \n               res.json({ success: true, message: object}); \n            }\n        \n        });\n        \n    });\n     \n    //------------------------------------------------------------------------\n    //\n    //     User base related routes\n    //\n    //------------------------------------------------------------------------\n    \n    //Sends response as a string/html\n    app.get(\"/user/snippet/:userId\", function(req,res){\n        mongooseLogic.getProfileSnippet(req.params.userId, function(mes){\n            if(mes === \"Error\"){\n                //res.json({ success: false, message:'Failed to find profile.'}); \n                res.send(\"You can not see this information\");\n            }\n            else{\n                //res.json({ success: true, message: mes}); \n                res.send(mes); \n            }   \n        });\n  \n    });\n    \n    app.get(\"/user/ownprofile\", function(req,res){\n         //console.log(\"got request\");\n\n        mongooseLogic.getUserBasicInfo(getLogedId(req), function(profil){\n            if(profil === \"Error\"){\n                res.json({ success: false, message:'Failed to find Users Cells.'});  \n            }\n            else{\n                res.json({ success: true, message: profil}); \n            }\n        });\n\n\n    });\n    \n    app.get(\"/user/isFriend/:userId/:target\", function(req,res){\n         //console.log(\"got request\");\n         mongooseLogic.isUserAFriend(req.params.userId, req.params.target, function(bool){\n            if(bool){\n                res.json({ success: true, message:'You are friends'});   \n            }\n            else{\n                res.json({ success: false, message:'You are  not friends'});\n            }  \n         });\n \n    });\n    \n    //Checks if user is a friends, if it is, sends request true with user profile\n    app.get(\"/user/profile/:target\", function(req,res){\n         //console.log(\"got request\");\n         mongooseLogic.isUserAFriend(getLogedId(req), req.params.target, function(bool){\n            if(bool){\n                 mongooseLogic.getFriendList(req.params.target, function(array){\n                    if(array === \"Error\"){\n                        res.json({ success: false, message:'Failed to find friends List.'});  \n                    }\n                    else{\n                        mongooseLogic.getUsersCells(req.params.target, function(cells){\n                            if(cells === \"Error\"){\n                                res.json({ success: false, message:'Failed to find Users Cells.'});  \n                            }\n                            else{\n                                mongooseLogic.getUserBasicInfo(req.params.target, function(profil){\n                                    if(profil === \"Error\"){\n                                        res.json({ success: false, message:'Failed to find Users Cells.'});  \n                                    }\n                                    else{\n                                        res.json({ success: true, message: {cell: cells, friends: array, profile: profil}}); \n                                    }\n                                });\n                            }\n                        });       \n                    }   \n                });  \n            }\n            else{\n                 res.json({ success: false, message:'You are  not friends.'}); \n            }\n         });\n    });\n    \n    //Update users map location loading\n    app.get(\"/user/location/update/:lat/:lng\", function(req, res){\n    \n        if(req.loggedIn){\n            mongooseLogic.setUserLatLng(getLogedId(req), req.params.lat, req.params.lng, function(mes){\n                if(mes === \"Success\"){\n                     res.json({ success: true, message:'Update users geo-location successfully.'});\n                }\n                else{\n                    res.json({ success: false, message:'Location update failed.'}); \n                }\n            });\n        }\n        else{\n            res.json({ success: false, message:'Invalid autorization.'}); \n        }  \n    });\n    \n    //Update users description\n    app.get(\"/user/objective/update/:string\", function(req, res){\n    \n        if(req.loggedIn){\n            mongooseLogic.setUserObjective(getLogedId(req), req.params.string, function(mes){\n                if(mes === \"Success\"){\n                     res.json({ success: true, message:'Update users objective.'});\n                }\n                else{\n                    res.json({ success: false, message:'Objective update failed.'}); \n                }\n            });\n        }\n        else{\n            res.json({ success: false, message:'Invalid autorization.'}); \n        }  \n    });\n    \n    //--------------------------------------------------------------------------\n    //\n    //     Comment system for individual workout\n    //\n    //--------------------------------------------------------------------------\n    \n    app.get(\"/workout/message/remove/:workoutid/:messageid\", function(req, res){\n        //console.log(\"in comment\"); \n        mongooseLogic.removeWorkoutMessage(req.params.workoutid, req.params.messageid, function(mes){\n             if(mes === \"Failed\"){\n                res.json({ success: false, message: \"Could not post message\"});   \n            }\n            else{\n                console.log(JSON.stringify(mes));\n                res.json({ success: true, message:\"Removed message\"});\n            }\n        });   \n     });\n    \n    app.get('/workout/message/:workoutid/:message', function(req, res){\n        \n        mongooseLogic.addWorkoutMessage(getLogedName(req), getLogedId(req), req.params.workoutid, req.params.message, function(mes){\n            if(RealTypeOf(mes) !== \"string\"){               \n                res.json({ success: true, message:mes});\n            }\n            else{\n                res.json({ success: false, message: mes}); \n            }\n        });\n        \n    });\n    \n    \n    \n    //----DELETION OF DATA -----------\n    \n    //This removes the workout first, if the workout is deleted, it then removes \n    //The calendar event reference\n    app.get(\"/workout/delete/:userid/:year/:month/:workoutid/:eventid\", function(req, res){       \n         \n         mongooseLogic.deleteEvent(req.params.eventid, req.params.userid, req.params.month, req.params.year,  function(message){\n            if(message !== \"Success\"){\n                res.json({ success: false, message:'Failed to delete Event.'});\n            }\n            else{\n                mongooseLogic.deleteWorkout(req.params.workoutid, function(message){\n                    if(message !== \"Success\"){\n                        res.json({ success: false, message:'Failed to delete calendar Workout.'});    \n                    }\n                    else{\n                        res.json({ success: true, message:'Deleted workout with success.'});\n                    }\n                });\n            }\n         \n         });\n       \n    });\n    \n    //Quit a cell workout, and delete workoutcell if your the last member\n    app.get(\"/workout/cell/quit/:year/:month/:workoutid/:eventid\", function(req, res){\n        //Delevent workout even in users profile\n        mongooseLogic.deleteEvent(req.params.eventid, getLogedId(req), req.params.month, req.params.year,  function(message1){\n            if(message1 !== \"Success\"){\n                res.json({ success: false, message:'Failed to delete Event.'});\n            }\n            else{\n                 //Removes the user from the workout participants list\n                 mongooseLogic.leaveWorkout(req.params.workoutid, getLogedId(req), function(message2){\n                    if(message2 === \"Success\"){\n                        res.json({ success: true, message:'Left workout.'});\n                    }\n                    else if (message2 === \"Failed\"){\n                        res.json({ success: false, message:'Failed to leave Workout.'});\n                    }\n                    //If the list is empty when user leaves, the function returns the cells ID so we can delete it\n                    else{ //This means the workoutcell has no users anymore, so delete the whole thing\n                        console.log(message2);\n                        mongooseLogic.deleteCellEvent(message2, req.params.month, req.params.year, req.params.workoutid, function(message3){\n                            if(message3 === \"Success\"){ //Event gone, can now delete workout savely\n                                mongooseLogic.deleteWorkout(req.params.workoutid, function(message4){\n                                    if(message4 !== \"Success\"){\n                                        res.json({ success: false, message:'Failed to delete Workout.'});    \n                                    }\n                                    else{\n                                        res.json({ success: true, message:'Left and Deleted workout with success.'});\n                                    }\n                                });\n                            }\n                            else{\n                                res.json({ success: false, message:'Left workout, but Failed to delete Workout.'}); \n                            }   \n                        });\n                    } \n                });  \n            }\n        });\n    \n    });\n\n\n    //------------------------------------------------------------------------\n    //\n    //     Coach routes\n    //\n    //------------------------------------------------------------------------\n    \n    //retreive specific workout in database\n    app.get(\"/result/coach/:workoutid/:userid/:cellid\", function(req, res){\n        \n         mongooseLogic.getWorkoutCoachMode(req.params.workoutid, req.params.userid, getLogedId(req), req.params.cellid, function(message){\n\n            if(RealTypeOf(message) === \"array\"){\n                res.json({ success: false, message:message});\n            }\n            else{\n                res.json(message);    \n            }         \n         });\n    });   \n        \n        \n        \n    \n    //------------------------------------------------------------------------\n    //\n    //     //!!!----Search -----!!!\n    //\n    //------------------------------------------------------------------------\n   \n    \n    app.get(\"/search/fullname/:first/:last\", function(req, res){\n        \n        var validRegEx = /^[^\\\\\\/&]*$/;\n        \n        if(req.params.first.match(validRegEx) && req.params.last.match(validRegEx)){\n        \n            searchEngine.searchByFullName(req.params.first, req.params.last, function(msg){\n                if(msg === \"failed\"){\n                    res.json({ success: false, message:'Couldnt process search, internal error'});     \n                }\n                else{\n                    res.json({ success: true, message: msg});\n                }\n                \n                \n            });\n            \n        }\n        else{\n            res.json({ success: false, message:'Couldnt process search, invalid format submitted.'});     \n        }      \n    });\n    \n    \n    app.get(\"/search/name/:word/:page\", function(req, res){\n    \n        var validRegEx = /^[^\\\\\\/&]*$/;\n        \n        if(req.params.word.match(validRegEx)){\n            searchEngine.searchOneWordName(req.params.word, parseInt(req.params.page), function(msg){\n                if(msg === \"failed\"){\n                    res.json({ success: false, message:'Couldnt process search, internal error'});     \n                }\n                else{\n                    res.json({ success: true, message: msg});\n                }\n            });     \n        }\n        else{\n            res.json({ success: false, message:'Couldnt process search, invalid format submitted.'});    \n        }\n    });\n    \n    app.get(\"/search/location/:word/:page\", function(req, res){\n    \n        var validRegEx = /^[^\\\\\\/&]*$/;\n        \n        if(req.params.word.match(validRegEx)){\n            searchEngine.searchByLocation(req.params.word, parseInt(req.params.page), function(msg){\n                if(msg === \"failed\"){\n                    res.json({ success: false, message:'Couldnt process search, internal error'});     \n                }\n                else{\n                    res.json({ success: true, message: msg});\n                }\n            });    \n        }\n        else{\n            res.json({ success: false, message:'Couldnt process search, invalid format submitted.'});   \n        }\n    });\n    \n    \n    //--------------------------------------------------------------------------\n    //\n    //    HTTP POST REQUEST\n    //\n    //--------------------------------------------------------------------------\n    \n    app.post(\"/parcour/:userId/:name/:distance\", function(req, res){\n      \n      if(isAllowed(req, req.params.userId)){\n        //console.log(req.body); \n        mongooseLogic.saveParcour(req.body, req.params.distance, req.params.name,\n            req.params.userId, function(mess){\n      \n            if(mess === \"success\"){\n                res.json({ success: true, message: \"Parcour '\" + req.params.name + \"' was saved\"});\n            }    \n            else{\n                res.json({ success: false, message: mess });   \n            }\n        });\n      }\n      else{\n          res.json({ success: false, message: \"Improper authentication\" }); \n      }\n       \n        \n    });\n    \n    //To post/update the results of a workout \n    app.post(\"/result/:userId/:workoutId\", function(req, res){\n        console.log(\"In route: \" + JSON.stringify(req.params) + \" - body: \" + JSON.stringify(req.body));\n\n        //Making sure the receive request is valid\n        if(typeof(req.body.type) !== undefined){\n        \n            mongooseLogic.saveResults(req.params.workoutId, req.body, req.params.userId, function(message){\n                if(message === \"Success\"){\n                    console.log(\"received call back success\");\n                    res.json({ success: true,  message: 'Result saved.'});    \n                }\n                else{\n                    res.json({ success: false,  message: 'Error in saving results. Trace: ' + message});\n                }\n\n            });\n        \n        }\n        else{\n            res.json({ success: false,  message: 'Failed, Invalid object sent to server'});   \n        }\n           \n    });\n    \n    //Creates a cell with his reference\n    app.post(\"/cell/create/:userId\", function(req, res){\n        console.log('in create cell route');\n        var receivedJSON = req.body\n        \n        if(isAllowed(req, req.params.userId) && typeof(receivedJSON.type) !== undefined){\n            mongooseLogic.createCell(req.params.userId, receivedJSON, getLogedName(req), function(mes){\n                if(mes === \"Success\"){\n                    res.json({ success: true,  message: 'Cell created.'});    \n                }\n                else{\n                    res.json({ success: false,  message: 'Error in saving Cell. Trace: ' + mes});\n                }\n            });\n        }\n        else{\n            res.json({ success: false,  message: 'Failed, Invalid object sent to server'});     \n        }\n        \n    });\n    \n    \n    //To post a workout \n    //Step 2: write event in event reference collection\n    //Step 1: write full workout in workout collection, and callback objectId\n    app.post(\"/workout/:userId\", function(req, res){\n     \n     //submitted object sould have event and workout inner object\n     //console.log(req.body);\n     var receivedJSON = req.body;//JSON.parse(req.body);\n     var eventObject = receivedJSON.event;\n     //console.log(eventObject);\n     var workoutObject = receivedJSON.workout;\n     \n      //step1   \n      if(typeof(eventObject) !== undefined && typeof(workoutObject) !== undefined){\n        mongooseLogic.saveWorkout(workoutObject, \"none\", \"none\", \"none\", function(savedWorkoutObjectId){\n            //console.log(savedWorkoutObjectId);\n            if(savedWorkoutObjectId !== \"not instantiated\"){\n                console.log(\"Saved Workout ...\");\n                mongooseLogic.saveEvent(eventObject, req.params.userId, \n                savedWorkoutObjectId, function(message){\n                    //res.contentType('application/json');\n                    if(message === \"not instantiated\"){\n                        //console.log(\"Event not Saved ...\");\n                        res.json({ success: false, message: 'Failed to saved workout.'});\n                    }\n                    else{\n                        //console.log(\"Saved Event ...\");\n                        res.json({ success: true,  message: 'Workout saved successfully.'});    \n                    }\n                });\n            }\n            else{\n                //res.header('application/json');\n                res.json({ success: false,  message: 'Failed, could not save event.'});          \n            }       \n        });\n      }\n      else{        \n         //res.header('application/json');\n         res.json({ success: false,  message: 'Failed, Invalid object sent to server'});  \n      }  \n    });\n    \n    \n    //Posting of a workout to a cell\n    //1- Save workout\n    //2- with workout id save cell workout month reference \n    //3- with workout id save user workout month reference \n    app.post(\"/workout/cell/:cellId/:userId\", function(req, res){\n        var receivedJSON = req.body;//JSON.parse(req.body);\n        var eventObject = receivedJSON.event;\n        var workoutObject = receivedJSON.workout;\n        console.log( \"UserId IS --> \" + getLogedId(req));\n        //step1   \n        if(typeof(eventObject) !== undefined && typeof(workoutObject) !== undefined){\n            mongooseLogic.saveWorkout(workoutObject, getLogedId(req), getLogedName(req), req.params.cellId, function(savedWorkoutObjectId){\n                if(savedWorkoutObjectId !== \"not instantiated\"){\n                    mongooseLogic.saveCellEvent(eventObject, req.params.cellId, \n                        savedWorkoutObjectId, function(cellEventMessage){   //If not failed, callback returns cell name, essential for notification           \n                        if(cellEventMessage === \"Failed\"){\n                            res.json({ success: false, message: 'Failed to saved Cell Event.'});\n                        }\n                        else{  \n                            eventObject.color = \"#C24747\";  // BAD' BUT IM LAZY AND LACKING TIME\n                            mongooseLogic.saveEvent(eventObject, req.params.userId, \n                            savedWorkoutObjectId, function(message){\n                                if(message === \"not instantiated\"){\n                                    //console.log(\"Event not Saved ...\");\n                                    res.json({ success: false, message: 'Failed to saved workout.'});\n                                }\n                                else{\n                                    //console.log(\"Saved Event ...\");\n                                    res.json({ success: true,  message: 'Workout saved successfully.'});\n                                   \n                                    //This section adds all proper new notifications\n                                    var mes = getLogedName(req) + ' added a new workout in ' + cellEventMessage + ' cell';\n                                    \n                                    var newNotification = {\n                                        type      : 'newCellWorkout', //joinMasterCell, workoutCell, broadcast\n                                        message   : mes, //Name of person\n\t                                    refId     : savedWorkoutObjectId,\n\t                                    refOId    : req.params.cellId,  //cellId\n\t                                    date      : new Date(), \n                                    }\n\n                                    notification.sendNotificationToCellUsers(req.params.cellId, newNotification, function(res){\n                                        if(res !== \"Success\"){\n                                              mongooseLogic.pushToNotificationLog(res + \" @ POST: /workout/cell/:cellId/:userId\");\n                                        }\n                                    });\n                                    \n                                    notification.sendNotificationToCell(req.params.cellId, newNotification, function(res){\n                                        if(res !== \"Success\"){\n                                            mongooseLogic.pushToNotificationLog(res + \" @ POST: /workout/cell/:cellId/:userId\");\n                                        }\n                                    });\n                                }\n                            }); \n                        }\n                    });\n                }\n                else{\n\n                    res.json({ success: false,  message: 'Failed, could not save event.'});          \n                }       \n            });\n        }\n        else{        \n            //res.header('application/json');\n             res.json({ success: false,  message: 'Failed, Invalid object sent to server'});  \n        }    \n    });\n    \n        \n    \n    //Join a cell workout, not a cell, but a workout in a cell, kinda confusing\n    app.post(\"/workout/cell/join/\", function(req, res){\n\n        var eventObject = req.body.event;\n        \n        mongooseLogic.joinCellWorkout(getLogedId(req), getLogedName(req), eventObject.refWorkout, function(mes){\n            if(mes === \"Failed\"){\n                res.json({ success: false, message:'Failed to join Workout.'});    \n            }\n            else{\n                mongooseLogic.saveEvent(eventObject, getLogedId(req), \n                eventObject.refWorkout, function(message){\n                    //res.contentType('application/json');\n                    if(message === \"not instantiated\"){\n                        //console.log(\"Event not Saved ...\");\n                        res.json({ success: false, message: 'Failed to join event.'});\n                    }\n                    else{\n                        //console.log(\"Saved Event ...\");\n                        res.json({ success: true,  message: 'Joined workout successfully.'}); \n                        \n                        //Send to all cell users you have joined this workout\n                        var newNotification = {\n                            type      : 'joinedWorkoutCell', //joinMasterCell, workoutCell, broadcast\n                            message   : getLogedName(req) + ' joined a workout.', //Name of person\n                            refId     : mes,\n                            refOId    : eventObject.refWorkout,  //cellId\n                            date      : new Date() \n                        }\n\n                        notification.sendNotificationToCellUsers(mes, newNotification, function(res){\n                            if(res !== \"Success\"){\n                                  notification.pushToNotificationLog(res + \" @ POST: /workout/cell/join/\");\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    });\n    \n    app.post(\"/notification/invitetocell/:cellId/:cellName/\", function(req, res){\n        \n        if(RealTypeOf(req.body) === \"array\" && req.body !== undefined){\n            var notificationObject = req.body;\n            res.json({ success: true,  message: 'Invites sent.'}); \n            \n            for(i=0;i<notificationObject.length;i++){\n                 mongooseLogic.checkIfUserInCell(req.params.cellId, notificationObject[i], function(mes1){ //returns the userIs\n                     if(mes1 === \"Existant\" || mes1 === \"Failed\"){\n                         console.log('Cant send invite (1)');\n                         mongooseLogic.pushToNotificationLog('Cant send invite (1)');\n                     }\n                     else{\n                        notification.saveCellRequestToQueu(getLogedName(req), req.params.cellName, mes1, req.params.cellId, function(mes2){\n                            if(mes2  === \"Existant\" || mes2 === \"Failed\"){\n                                console.log('Cant send invite (2)');\n                                 mongooseLogic.pushToNotificationLog('Cant send invite (2)');\n                            }\n                            else{\n                                \n                            }\n                        }); \n                     }\n                 });\n            }\n        }\n        else{\n            res.json({ success: false,  message: 'Invites invalid.'}); \n            \n        }\n        \n    });\n    \n    app.post(\"/giveright/\", function(req,res){\n       \n        //console.log(req.body);\n        var arrayOfIds = req.body.load;\n       \n        mongooseLogic.addUserInRight(arrayOfIds, getLogedId(req), function(mes){\n        \n            if(mes === \"Success\"){\n                res.json({ success: true,  message: 'Request successfully processed'}); \n            }\n            else{\n                res.json({ success: false,  message: mes}); \n            }\n           \n        });\n        \n    });\n    \n    //*************************************************************************\n    //\n    // Statistical based routes\n    //\n    //--------------------------------------------------------------------------\n    \n    app.post(\"/statistics/workoutbased\", function(req,res){\n       \n        console.log(req.body);\n        var arrayOfIds = req.body.array;\n       \n        statisticsEngine.calaculateWorkoutsStatistics(arrayOfIds, \"100000268779394\"/*getLogedId(req)*/, function(mes){\n        \n            res.json(mes);\n           \n        });\n        \n    });\n    \n    \n        \n    //*************************************************************************\n    //Facebook auth command samples\n    //Sample of auth if statement\n    //TEST ZONE\n    //\n    //--------------------------------------------------------------------------\n    \n    app.get('/hasRights', function(req, res){\n        //Permission.findOne({ firstName: req.session.auth.facebook.user.first_name, lastName: req.session.auth.facebook.user.last_name}, function(err, result){\n        Permission.findOne({ id: parseInt(getLogedId(req))}, function(err, result){\n            console.log(JSON.stringify(result) + \" for \" + getLogedId(req) + \" : \" + req.session.auth.facebook.user.first_name);\n            if(err){\n                res.redirect('/logout');\n            }\n            else if(result){\n                res.redirect('/view/index');\n            }\n            else{\n                res.redirect('/logout');\n            }\n        });\n\n    });\n    \n    app.get('/invitesleft', function(req, res){\n        \n        Permission.findOne({ id: getLogedId(req)}, function(err, result){\n            if(err){\n                res.json({ success: false,  message: 'Cant get invite'});\n            }\n            else{\n                res.json({ success: true,  message: result.invites});\n            }\n        });\n        \n    });\n    \n    app.get('/test', function(req, res) {\n        //console.log(everyauth.facebook.routes + everyauth.facebook.configurable());  // FTW!\n        if (req.loggedIn) {\n            res.send('Logged in');\n        }\n        else {\n            res.send(\"Not logged in\");\n        }\n    });\n    app.get('/profile', function(req, res) {\n        //console.log(everyauth.facebook.routes + everyauth.facebook.configurable()); // FTW!\n        res.send('Fb user is: ' + JSON.stringify(req.session.auth.facebook) + '<br>');\n    });\n    app.get('/authDetails', function(req, res) {\n        res.send('<br>User info: ' + JSON.stringify(req.session));\n    });\n    \n    app.post('/dummyUser', function(req, res) {\n        \n        var fbUserMetadata = req.body;\n        \n        User.create({ fbid: fbUserMetadata.fbid, firstName: fbUserMetadata.firstName, lastName: fbUserMetadata.lastName, \n            location: {name: fbUserMetadata.location.name, latlng: {lat: 0, lng: 0}}, objective: \"Train socially and improve ! \",\n            color:{bike:\"#CCCCCC\", swim: \"#99CCFF\", run: \"#CC9966\", cell: \"#C24747\"}}, function (err, user) {\n            \n            if(err){\n                res.json('Error: ' + err);\n            }\n            else{\n                res.json('Saved');    \n            }\n            /*\n            if (err) return promise.fail(err);\n            promise.fulfill(user);\n            \n            GeneralReference.create({ id: id}, function(err, ref){\n               if (err) return promise.fail(err);   \n            }); \n            \n            CalendarEventReference.create({ id: id}, function(err, ref){\n               if (err) return promise.fail(err);   \n            }); \n            \n            NotificationsReference.create({ id: id, pendingSize: 0, unRead: 0}, function(err, ref){\n               if (err) return promise.fail(err);   \n            });\n            \n            CardioResult.create({ id: id}, function(err, ref){\n               if (err) return promise.fail(err);   \n            }); */\n    \n        });\n    });\n}\n\nvar getLogedName = function(req){\n    \n    return req.session.auth.facebook.user.name;\n\n}\n\nvar getLogedId = function(req){\n    \n    return req.session.auth.facebook.user.id;\n    \n}\n\n//Security measures implemented here\n\nvar isAllowed = function(request, urlId){\n    \n    if(request.session.auth.facebook.user.id === urlId){\n       return true; \n    }\n    else{\n      return false;     \n    }\n        \n}\n\n\nfunction is_int(value){ \n  if((parseFloat(value) == parseInt(value)) && !isNaN(value)){\n      return true;\n  } else { \n      return false;\n  } \n}\n\n//Taken from http://joncom.be/code/realtypeof/\nfunction RealTypeOf(v) {\n  if (typeof(v) == \"object\") {\n    if (v === null) return \"null\";\n    if (v.constructor == (new Array).constructor) return \"array\";\n    if (v.constructor == (new Date).constructor) return \"date\";\n    if (v.constructor == (new RegExp).constructor) return \"regex\";\n    return \"object\";\n  }\n  return typeof(v);\n}"]],"start1":0,"start2":0,"length1":0,"length2":47984}]],"length":47984}
{"contributors":[],"silentsave":false,"ts":1340586371701,"patch":[[{"diffs":[[0,"y.array;\n       "],[-1,"\n"],[1," if(arrayOfIds.length === 0){\n            \n        }\n        else{\n    "],[0,"        statisti"]],"start1":43466,"start2":43466,"length1":33,"length2":103},{"diffs":[[0,"n(mes){\n        "],[-1,"\n"],[1,"    \n    "],[0,"            res."]],"start1":43664,"start2":43664,"length1":33,"length2":41},{"diffs":[[0,"\n           "],[-1,"\n"],[1,"    \n "],[0,"        "],[-1,"});"],[1,"   });\n        }"],[0,"\n        \n  "]],"start1":43715,"start2":43715,"length1":36,"length2":54}]],"length":48080,"saved":false}
{"ts":1340589648871,"patch":[[{"diffs":[[0,"    "],[-1,"console.log('In else');"],[0,"\n   "]],"start1":43616,"start2":43616,"length1":31,"length2":8}]],"length":48180,"saved":false}
