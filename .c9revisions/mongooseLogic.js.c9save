{"ts":1340323523308,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var ObjectId = require('./node_modules/mongoose').Types.ObjectId;\n\n//**************************PARCOUR LOGIC **************************************\n//Save a parcour un referencial collection and in data collection\nvar saveParcour = function(object, distance, name, userId, callback){\n    \n    var newParcour = new Parcour();\n    //newParcour.content = JSON.stringify(object);\n    newParcour.distance = distance;\n    newParcour.markers.latlng = object.markers.latlng;\n    newParcour.markers.titles = object.markers.titles;\n    newParcour.path = object.path;\n    newParcour.name = name;\n    \n    var newParcourReference = new ParcourReference();\n    newParcourReference.realId = newParcour._id;\n    newParcourReference.name = name;\n    newParcourReference.distance = distance;\n    newParcourReference.staticUrl = object.staticUrl;\n\n    newParcour.save(function(err){\n    \n      if(err) { \n        console.log(\"error in save: \" + err);\n        callback(\"Couldn't save document, Database error\");\n      }else{\n        \n        GeneralReference.findOne({ id: userId}, function(err, result){\n     \n          if(err || result === null){\n            console.log(\"error in save: \" + err + \" - User returned for \" + userId + \" : \" + result);\n            callback(\"Couldn't find users General Reference Collection\");\n          }else{\n            \n            result.parcours.push(newParcourReference);\n            result.save(function(err){\n              if(err){\n                 console.log(\"Error in save: \" + err); \n                 callback(\"Couldn't save Parcour Reference\");\n              }else{\n                 callback(\"success\");\n              }\n            });\n          }\n        }); \n      }    \n    }); \n  \n}\n\n//will return an array of all parcours\nvar getParcourList = function(userId, callback){\n    \n \n   GeneralReference.findOne({ id: userId}, function(err, result){\n    var callB;\n     if(err || result === null){\n       console.log(\"Error in getParcourList: \" + err + \" - User returned for \" + userId + \" : \" + result);\n       callB = \"No Document found: \" + err; \n     }else{\n       //console.log(userId + \" : \" + result);\n       callB = result.parcours; \n     } \n     callback(callB);\n  });\n   \n}\n\nvar getParcour = function(parcourId, callback){\n   \n   //var myObjectId = ObjectId.fromString(parcourId); \n    console.log(\"Searching for parcour\");\n    Parcour.findOne({ _id: parcourId }, function(err, result){\n       var callB;\n       if(err || result === null){\n          console.log(\"Error in getParcour: \" + err + \" - Parcour returned for \" +  parcourId + \" : \" + result);\n          callB = \"No Document found: \" + err; \n       }else{\n         //console.log(userId + \" : \" + result);\n         callB = result; \n       } \n     callback(callB);\n  });\n  \n}\n\nvar deleteParcour = function(parcourId, userId, callback){\n    GeneralReference.update({ \"id\" : userId}, { $pull: { parcours: { realId :  ObjectId.fromString(parcourId)}}}, function(err){\n        if(err){\n            callback(\"User doesnt have this parcour: \" + err );\n        }\n        else{ //Memeber not in cell yet, so he can join\n          Parcour.remove({ \"_id\" : parcourId}, function(err){    \n                if(err){\n                    callback(\"Cant remove parcour. Stack: \" + err);\n                }\n                else{\n                    callback(\"Success\"); \n                }\n            });\n        }\n    });\n}\n\n\n//****************WORKOUTS LOGIC ****************************************\n\n//Saves an event (also a reference at the same time), the callback will send the\n//\nvar saveEvent = function(eventObject, userId, workoutRef, callback){\n    \n    var callbackVar = \"not instantiated\";\n    var theEvent = new CalendarEvent();\n  \n    theEvent.title = eventObject.title;\n    theEvent.allDay = eventObject.allDay;\n    theEvent.start = eventObject.start;\n    theEvent.end = eventObject.end;\n    theEvent.url = \"/workout/\" + workoutRef;\n    theEvent.color = eventObject.color;\n    theEvent.refWorkout = workoutRef;\n    \n   \n    var month = new CalendarMonth();\n    var eventDate = new Date(eventObject.start);\n    //The workout array starts on 1 Jan 2011, all other positions in array are \n    //relative to this start day. To find the year/month of an array loc use modulo\n    arrayLocation = 1 + (((parseInt(eventDate.getFullYear())) - 2011)*12) + parseInt(eventDate.getMonth());\n    //console.log(arrayLocation);\n    //console.log(eventDate.getMonth());\n    console.log('Searching for userId in event ref collection: ' + userId);\n    CalendarEventReference.findOne({ id: userId }, function(err, resultReference){\n   \n        if(err){\n            console.log('Error in finding calendar reference collection: ' + err); \n            callbackVar = \"not instantiated\";  \n            callback(callbackVar);\n        }\n        else{\n            //console.log(resultReference.ref.length);\n            var initialRefLength = resultReference.ref.length;\n            if(resultReference.ref.length <= arrayLocation){\n                //console.log(\"In if\");\n                for(i = initialRefLength; i <= (arrayLocation); i++){\n                    //console.log(\"In loop: \" +i);\n                    resultReference.ref.push({id: (i + initialRefLength), allEvents: []});  \n                } \n                resultReference.ref[arrayLocation].allEvents.push(theEvent);\n            }\n            else{\n             \n                resultReference.ref[arrayLocation].allEvents.push(theEvent);\n   \n            }\n\n            resultReference.save(function(err){\n     \n                if(err){\n                    console.log('Error in finding calendar reference: ' + err);\n                    callbackVar = \"not instantiated\";  \n                    callback(callbackVar);\n                }\n                else{\n                    //console.log('Succesfully saved Event'); \n                    callback(\"Successfully saved Workout and Reference\");\n                }      \n            });\n        }\n\n    });\n\n}\n\n//Saves workout, sends callback has the objectid, to then save in reference collection\nvar saveWorkout = function(workoutObject, logedId, logedName, idCell, callback){\n    \n    var theWorkout = \"not instantiated\";\n    var callbackValue = \"not instantiated\";\n    var receivedParcour = {};\n    var cell = {};\n\n    if(workoutObject.parcour.id === \"none\"){\n        receivedParcour = {};\n    }\n    else{\n        receivedParcour = {\n            id       : ObjectId(workoutObject.parcour.id), \n            name     : workoutObject.parcour.name,\n            distance : workoutObject.parcour.distance,\n            staticUrl: workoutObject.parcour.staticUrl\n        };\n    }\n    \n    if(logedId !== \"none\" && logedName !== \"none\" && cell !== \"none\"){\n          \n        var tinyuser = {\n            fbid      : parseInt(logedId),\n            fullName  : logedName,\n        }\n    \n        var array = [];\n        array.push(tinyuser);\n            \n        cell = {\n           creator       : tinyuser,\n           participants  : array,\n           cellId        : ObjectId(idCell)\n           \n        }; \n    \n    }\n    else{                  \n          cell = {};  \n    }\n    \n    if(workoutObject.type === \"intervall\"){\n       \n       //console.log(JSON.stringify(workoutObject.intervalls));\n       //We rewrite the parcour name, not just the id, because we dont want\n       //to http request just to get the name\n       theWorkout = new CardioWorkout({ \n            sport              :workoutObject.sport, \n            type               :workoutObject.type,\n            intervalls         :workoutObject.intervalls,\n            description        :workoutObject.description,\n            cell               :cell,\n            parcour            :receivedParcour,\n            //intervallResult    :[]\n       }); \n       \n       theWorkout.save(function(err){\n            if(err){\n                console.log(\"Error in save: \" + err);  \n                callbackValue = \"not instantiated\";\n                callback(callbackValue);\n            }else{\n                callbackValue = theWorkout._id;\n                callback(callbackValue);\n            }\n        });  \n    }\n    else if(workoutObject.type === \"distance\" ){\n        var distanceValues = {\n            targetType     :workoutObject.distance.targetType, \n            minValue       :workoutObject.distance.minValue,\n            maxValue       :workoutObject.distance.maxValue, \n            intensity      :workoutObject.distance.intensity          \n        };\n        \n        theWorkout = new CardioWorkout({ \n            sport                :workoutObject.sport, \n            type                 :workoutObject.type,\n            distance             :distanceValues,\n            description          :workoutObject.description,\n            cell                 :cell,\n            parcour              :receivedParcour,\n            distanceResult       :{}\n       }); \n       \n       theWorkout.save(function(err){\n            if(err){\n                console.log(\"error in save: \" + err);  \n                callbackValue = \"not instantiated\";\n                callback(callbackValue);\n            }else{\n                callbackValue = theWorkout._id;\n                callback(callbackValue);\n            }\n        });\n    }\n    else{\n        //something went wrong\n        callbackValue = \"not instantiated\";\n        callback(callbackValue);\n    }\n        \n};\n\n\nvar saveCellEvent = function(eventObject, cellId, workoutRef, callback){\n    \n    var callbackVar = \"not instantiated\";\n    var theEvent = new CalendarEvent();\n  \n    theEvent.title = eventObject.title;\n    theEvent.allDay = eventObject.allDay;\n    theEvent.start = eventObject.start;\n    theEvent.end = eventObject.end;\n    theEvent.url = \"/workout/\" + workoutRef;\n    theEvent.color = \"#C24747\";  //Special color for cells\n    theEvent.refWorkout = workoutRef;\n    \n   \n    var month = new CalendarMonth();\n    var eventDate = new Date(eventObject.start);\n    //The workout array starts on 1 Jan 2011, all other positions in array are \n    //relative to this start day. To find the year/month of an array loc use modulo\n    arrayLocation = 1 + (((parseInt(eventDate.getFullYear())) - 2011)*12) + parseInt(eventDate.getMonth());\n    CellDetails.findOne({ _id: cellId }, function(err, resultReference){\n   \n        if(err || resultReference === null){\n            //console.log('Error in finding calendar reference collection: ' + err + ' at id: ' + cellId); \n            callback(\"Failed\");\n        }\n        else{\n            console.log(resultReference);\n            var initialRefLength = resultReference.activities.length;\n            if(resultReference.activities.length <= arrayLocation){\n                //console.log(\"In if\");\n                for(i = initialRefLength; i <= (arrayLocation); i++){\n                    //console.log(\"In loop: \" +i);\n                    resultReference.activities.push({id: (i + initialRefLength), allEvents: []});  \n                } \n                resultReference.activities[arrayLocation].allEvents.push(theEvent);\n            }\n            else{        \n                resultReference.activities[arrayLocation].allEvents.push(theEvent); \n            }\n            resultReference.save(function(err){\n     \n                if(err){\n                    //console.log('Error in finding calendar reference: ' + err);\n                    callback(\"Failed\");\n                }\n                else{\n                    //console.log('Succesfully saved Event'); \n                    callback(resultReference.name);\n                }      \n            });\n        }\n    });  \n}\n\n\nvar saveResults = function(workoutRefId, receivedResult, userId, callback){\n    \n    //console.log(\"Top:\" + JSON.stringify(receivedResult) + \" : \" + workoutRefId);\n    \n    if(workoutRefId.toString().length !== 24 ){\n        \n       console.log(\"Invalid objectId submitted @ getWorkout()\");\n       callback(\"Invalid objectId for workoutId\");\n    }\n    else{\n        //Means this is a intervall trainning\n        if(RealTypeOf(receivedResult) === \"array\"){\n            //console.log(\"Looking for: \" + userId + \" at workout id: \" +  workoutRefId);\n            CardioResult.findOne({ \"id\" : userId, \"intervallResult.workoutId\": workoutRefId }, function(err, result){\n                if(err){\n                    callback(\"No Document found: \" + err);\n                }\n                else if( result === null){ //this means the document doesnt exist so lets push it to the array\n                    //console.log('document not found');\n                    var tempResult = {\n                        workoutId    :workoutRefId,\n                        intervalls   :receivedResult\n                    }\n                    \n                    CardioResult.update({ \"id\" : userId}, { $push: {\"intervallResult\": tempResult}}, {upsert: true}, function(err){\n                        if(err){\n                            callback(\"Error in saving result (intervall): \" + err);\n                        }\n                        else{\n                            callback(\"Success\");\n                        }\n                    });\n                }\n                else{\n                    //console.log('in document update');\n                    CardioResult.update({ \"id\" : userId, \"intervallResult.workoutId\": workoutRefId },\n                        { $set:{\"intervallResult.$.intervalls\":receivedResult}},{upsert: true}, function(err){\n                            if(err){\n                                callback(\"Cant update doc: \" + err);\n                            }\n                            else{\n                                 callback(\"Success\");\n                            }\n                    });\n                }\n            });   \n        }\n        else{ //should be a distance training\n            //console.log(\"in else\");\n            CardioResult.findOne({ \"id\" : userId, \"distanceResult.workoutId\": workoutRefId }, function(err, result){\n                if(err){\n                    callback(\"No Document found: \" + err);\n                }\n                else if( result === null){\n                    console.log(\"in null\");\n                    var tempResult =  {\n                        workoutId    : workoutRefId, \n                        unit         : receivedResult.unit, \n                        value        : receivedResult.value, \n                        completed    : receivedResult.completed\n                    }\n                    CardioResult.update({ \"id\" : userId}, { $push: {\"distanceResult\": tempResult}}, {upsert: true}, function(err){\n                        if(err){\n                            callback(\"Error in saving result (Distance): \" + err);\n                        }\n                        else{\n                            callback(\"Success\");\n                        }\n                    });\n                }\n                else{\n                    //console.log(\"Looking for: \" + userId + \" at workout id: \" +  workoutRefId);              \n                    CardioResult.update({ \"id\" : userId, \"distanceResult.workoutId\": workoutRefId },\n                        { $set:{\n                            \"distanceResult.$.unit\"        : receivedResult.unit,\n                            \"distanceResult.$.value\"       : receivedResult.value,\n                            \"distanceResult.$.completed\"   : receivedResult.completed}\n                        },{upsert: true}, function(err){\n                            if(err){\n                                callback(\"Cant update doc: \" + err);\n                            }\n                            else{\n                                console.log(\"in else (2)\");\n                                callback(\"Success\");\n                            } \n                    }); \n                }\n            }); \n        }\n    }\n}\n\n\nvar getWorkout = function(workoutRefId, userId, callback){\n    \n    //Verify the object is a valid objectid\n    if(workoutRefId.toString().length !== 24 ){\n        \n       console.log(\"Invalid objectId submitted @ getWorkout()\");\n       callback(\"Invalid objectId for workoutId\");\n    }\n    else{\n        CardioWorkout.findOne({ _id: workoutRefId }, function(err, workoutResult){\n\n            if(err || workoutResult === null){\n                callback(\"No such workout: \" + err);\n            }\n            else{\n                var queryRestriction;\n                var parameterName;\n                if(workoutResult.type === \"distance\"){\n                    queryRestriction = { \"id\" : parseInt(userId), \"distanceResult.workoutId\" : ObjectId.fromString(workoutRefId)};\n                    parameterName = \"distanceResult\";\n                }\n                else{\n                    queryRestriction = { \"id\" : parseInt(userId), \"intervallResult.workoutId\" : ObjectId.fromString(workoutRefId)};\n                    parameterName = \"intervallResult\";\n                }\n                \n                CardioResult.findOne(queryRestriction, function(err, result){\n                    if(err){ \n                        callback(\"Error in finding: \" + err);\n                    }\n                    else if(result === null){\n                        //console.log(\"cant find: \" + queryRestriction + \" at \" + workoutRefId + \" for user \" + userId);\n                        callback(workoutResult);\n                    }\n                    else{    \n                        //console.log(JSON.stringify(result));\n                        result[parameterName].forEach(function (element) {\n                            if(element.workoutId.toString() === workoutRefId){\n                                if(workoutResult.type === \"distance\"){\n                                    //console.log(\"Found match \" + JSON.stringify(element));\n                                    workoutResult[parameterName] = element;\n                                    callback(workoutResult);\n                                    \n                                }\n                                else{\n                                    workoutResult[parameterName] = element.intervalls;\n                                    callback(workoutResult);\n                                } \n\n                            }\n                        });\n                    \n                    }\n                    \n                });\n            }  \n        });\n    }\n  \n}\n\nvar getWorkoutCoachMode = function(workoutRefId, userId, coachId, cellId, callback){\n    \n    isCellCoach(cellId, coachId, function(coachStatus){\n        //Verify the object is a valid objectid\n        if(coachStatus === false || coachStatus === \"Error\"){\n            callback(\"Not coach for this cell, or invalid workout\");\n        }\n        else{\n        \n            if(workoutRefId.toString().length !== 24 ){\n               console.log(\"Invalid objectId submitted @ getWorkout()\");\n               callback(\"Invalid objectId for workoutId\");\n            }\n            else{\n                CardioWorkout.findOne({ _id: workoutRefId }, function(err, workoutResult){\n        \n                    if(err || workoutResult === null){\n                        callback(\"No such workout: \" + err);\n                    }\n                    else{\n                        var queryRestriction;\n                        var parameterName;\n                        if(workoutResult.type === \"distance\"){\n                            queryRestriction = { \"id\" : parseInt(userId), \"distanceResult.workoutId\" : ObjectId.fromString(workoutRefId)};\n                            parameterName = \"distanceResult\";\n                        }\n                        else{\n                            queryRestriction = { \"id\" : parseInt(userId), \"intervallResult.workoutId\" : ObjectId.fromString(workoutRefId)};\n                            parameterName = \"intervallResult\";\n                        }\n                        \n                        CardioResult.findOne(queryRestriction, function(err, result){\n                            if(err){ \n                                callback(\"Error in finding: \" + err);\n                            }\n                            else if(result === null){\n                                //console.log(\"cant find: \" + queryRestriction + \" at \" + workoutRefId + \" for user \" + userId);\n                                callback(workoutResult);\n                            }\n                            else{    \n                                //console.log(JSON.stringify(result));\n                                result[parameterName].forEach(function (element) {\n                                    if(element.workoutId.toString() === workoutRefId){\n                                        if(workoutResult.type === \"distance\"){\n                                            //console.log(\"Found match \" + JSON.stringify(element));\n                                            workoutResult[parameterName] = element;\n                                            callback(workoutResult);\n                                            \n                                        }\n                                        else{\n                                            workoutResult[parameterName] = element.intervalls;\n                                            callback(workoutResult);\n                                        } \n        \n                                    }\n                                });\n                            \n                            }\n                            \n                        });\n                    }  \n                });\n            }\n        }\n    });\n}\n\nvar getMonthEvent = function(userId, year, month, callback){\n    \n    var callB = \"not instantiated\";\n    \n    CalendarEventReference.findOne({ id: userId}, function(err, result){\n    \n        if(err || result === null){\n            //console.log(\"No document found or: \" + err);\n            callB = \"not instantiated\";\n            callback(callB);\n        }\n        else{\n            //transform month and year into location\n           var arrayLocation = ((parseInt(year) - 2011)*12) + parseInt(month);\n           //console.log(\"Looking if \" + arrayLocation + \" is smaller then \" + result.ref.length);\n           if(result.ref.length > arrayLocation && parseInt(year) > 2010){\n                //console.log(\"Getting data in array\");\n                callB = result.ref[arrayLocation].allEvents; \n                callback(callB); \n           }\n           else{\n            //console.log(\"Invalid month or year\");\n            callB = \"not instantiated\";\n            callback(callB);\n           \n           }\n        } \n \n    });\n}\n\n//Similar has previous but for a cell\nvar getCellMonthEvent = function(cellId, year, month, callback){\n    \n    var callB = \"not instantiated\";\n    \n    CellDetails.findOne({ _id: cellId}, function(err, result){\n    \n        if(err || result === null){\n            callB = \"not instantiated\";\n            callback(callB);\n        }\n        else{\n           var arrayLocation = ((parseInt(year) - 2011)*12) + parseInt(month);\n           if(result.activities.length > arrayLocation && parseInt(year) > 2010){\n                callB = result.activities[arrayLocation].allEvents; \n                callback(callB); \n           }\n           else{\n            callB = \"not instantiated\";\n            callback(callB);\n           \n           }\n        } \n \n    });\n}\n\n//Remove specific workout from its workoutid\nvar deleteWorkout = function(workoutId, callback){\n    \n    //Verify the object is a valid objectid\n    if(workoutId.toString().length !== 24 ){\n        \n       console.log(\"Invalid objectId submitted @ deleteWorkout()\");\n       callback(\"Invalid objectId for workoutId\");\n    }\n    else{\n        //var myObjectId = ObjectId.fromString(workoutId); \n        //console.log(\"Searching for parcour at: \" + workoutId);\n        CardioWorkout.remove({ _id: workoutId }, function (err, result) {\n            if (err) { \n                //console.log(\"In deleteWorkout Failed\");\n                callback(\"Error in deletion. Stack Trace: \" + err); \n            }\n            else{\n                //console.log(\"In deleteWorkout success\" + JSON.stringify(result));\n                callback(\"Success\");      \n            }      \n        });\n    }  \n}\n\nvar deleteEvent = function(eventId, userId, month, year, callback){\n    \n    //Verify the object is a valid objectid\n    if(eventId.toString().length !== 24 || !isNumber(month) || !isNumber(year) || month < 0 || year < 2011){\n       //console.log(\"Invalid objectId or input submitted @ deleteEvent()\");\n       callback(\"deleteEvent - Invalid objectId or input for eventId\");\n    }\n    else{\n        var arrayLocation = 1 + ((parseInt(year) - 2011)*12) + parseInt(month);\n        //var myObjectId = ObjectId.fromString(workoutId); \n        //console.log(\"Searching for parcour at: \" + workoutId);\n        CalendarEventReference.findOne({ id: userId }, function (err, result) {\n            if (err || result === null) { \n                //console.log(\"In deleteEvent error(1)\");\n                callback(\"deleteEvent - Error in deletion. Stack Trace: \" + err); \n            }\n            else{\n                //console.log(result.ref.length + \" vs \" + arrayLocation);\n                if(typeof(result.ref.length) !== \"undefined\" && result.ref.length > arrayLocation \n                    && result.ref[arrayLocation].allEvents.id(eventId) !== null){\n                    //Mongoose special command to .id to search an _id\n                    result.ref[arrayLocation].allEvents.id(eventId).remove();\n                    result.save(function (err) {\n                        if (err) { \n                            console.log(\"deleteEvent - In deleteEvent error(2)\");\n                            callback(\"Error in deletion. Stack Trace: \" + err); \n                        }\n                        else{\n                            //console.log(\"In deleteEvent Success\");\n                            callback(\"Success\");      \n                        }      \n                    });\n                \n                }\n                else{\n                    console.log(\"In deleteEvent error(3)\");\n                    callback(\"Error, couldnt find calendar event\");\n                }                   \n            }\n        });\n    }\n}\n\nvar leaveWorkout = function(workoutRefId, userId, callback){\n    \n    var callbackSuccess = \"Success\";\n    \n    if(workoutRefId.toString().length !== 24 ){\n        \n       console.log(\"leaveWorkout - Invalid objectId submitted @ getWorkout()\");\n       callback(\"Invalid objectId for workoutId\");\n    }\n    else{\n        CardioWorkout.findOne({ _id: workoutRefId }, function(err, workoutResult){\n\n            if(err || workoutResult === null){\n                callback(\"Failed\");\n            }\n            else{\n                var queryRestriction;\n                var parameterName;\n                if(workoutResult.type === \"distance\"){\n                    queryRestriction = { \"id\" : parseInt(userId), \"distanceResult.workoutId\" : ObjectId.fromString(workoutRefId)};\n                    parameterName = \"distanceResult\";\n                }\n                else{\n                    queryRestriction = { \"id\" : parseInt(userId), \"intervallResult.workoutId\" : ObjectId.fromString(workoutRefId)};\n                    parameterName = \"intervallResult\";\n                }\n\n                for(i = 0; i < workoutResult.cell.participants.length;i++){\n                    //console.log(\"In 1 loop \" + typeof(workoutResult.cell.participants[i].fbid).toString() + \" vs user \" + typeof(userId));\n                    if(workoutResult.cell.participants[i].fbid.toString() === userId){\n                        //console.log(\"In 1 loop condition\");\n                        workoutResult.cell.participants[i].remove();\n                        \n                        if(workoutResult.cell.participants.length === 0){\n                            callbackSuccess = workoutResult.cell.cellId;\n                        }\n                        \n                        workoutResult.save(function (err) {\n                           if (err) { \n                                callback(\"Failed\"); \n                            }       \n                            else{\n                                //console.log(\"In deleteEvent Success\");\n                                CardioResult.findOne(queryRestriction, function(err, result){\n                                    if(err){ \n                                        callback(\"Failed\");\n                                    }\n                                    else if(result === null){\n                                        //This means user hasnt filled in any result for this workout yet\n                                        callback(callbackSuccess);\n                                    }\n                                    else{    \n                                        //console.log(JSON.stringify(result));\n                                            for(i=0; i < result[parameterName].length; i++){\n                                                //console.log(\"In  loop 2\");\n                                                if(result[parameterName][i].workoutId.toString() === workoutRefId){\n                                                    //console.log(\"In loop 2 condition\");\n                                                    result[parameterName][i].remove();\n                                                    result.save(function (err) {\n                                                        if (err) { \n                                                            //console.log(\"In deleteEvent error(2)\");\n                                                            callback(\"Failed\"); \n                                                        }       \n                                                        else{\n                                                            //console.log(\"In deleteEvent Success\");\n                                                            callback(callbackSuccess);      \n                                                        }      \n                                                });\n                                            }\n                                        }\n                                    }\n                                });\n                            }      \n                        });\n                    }\n                }  \n            }  \n        });\n    }\n}\n\nvar deleteCellEvent = function(cellId, month, year, workoutId, callback){\n   \n    CellDetails.findOne({ _id: cellId }, function (err, result) {\n        if (err || result === null) { \n            console.log(\"deleteCellEvent - In deleteCellEvent error(1) at: \" + err);\n            callback(\"Error in deletion. Stack Trace: \" + err); \n        }\n        else{\n            var arrayLocation = 1 + ((parseInt(year) - 2011)*12) + parseInt(month);\n            \n            if(typeof(result.activities.length) !== \"undefined\" && result.activities.length > arrayLocation){\n                \n                for(i = 0; i < result.activities[arrayLocation].allEvents.length; i++){\n                    if(result.activities[arrayLocation].allEvents[i].refWorkout === workoutId){\n                        result.activities[arrayLocation].allEvents[i].remove();\n                        result.save(function (err) {\n                            if (err) { \n                                console.log(\"deleteCellEvent - In deleteCellEvent error(2)\" + err);\n                                callback(\"Error in deletion. Stack Trace: \" + err); \n                            }\n                            else{\n                                //console.log(\"In deleteCellEvent Success\" + err);\n                                callback(\"Success\");      \n                            }      \n                        });\n                    }   \n                }\n            }\n            else{\n                console.log(\"deleteCellEvent - In deleteCellEvent error(3)\");\n                callback(\"Error, couldnt find calendar event\");\n            }                   \n        }\n    });  \n}\n\n//This function returns the cellId found, essential for /workout/cell/join/ route\nvar joinCellWorkout = function(userId, userName, workoutId, callback){\n    \n    if(workoutId.toString().length !== 24 ){\n        \n       console.log(\"joinCellWorkout - Invalid objectId submitted @ getWorkout()\");\n       callback(\"Failed\");\n    }\n    else{\n        CardioWorkout.findOne({ _id: workoutId }, function(err, workoutResult){\n\n            if(err || workoutResult === null){\n                console.log(\"joinCellWorkout - In JoinCellWorkout error(1)\" + err);\n                callback(\"Failed\");\n            }\n            else{\n                \n                var tinyUser = {\n                    fbid      : userId,\n                    fullName  : userName\n                }\n                workoutResult.cell.participants.push(tinyUser);\n                workoutResult.save(function (err) {\n                    if (err) { \n                        console.log(\"joinCellWorkout - In JoinCellWorkout error(2)\" + err);\n                        callback(\"Failed\"); \n                    }\n                    else{\n                        //console.log(\"In JoinCellWorkout Success\" + err);\n                        callback(workoutResult.cell.cellId);      \n                    }      \n                });\n            }\n        });\n    }\n    \n}\n\nvar addWorkoutMessage = function(userName, userId, workoutId, themessage, callback){\n    \n    if(workoutId.toString().length !== 24 ){\n       //console.log(\"Invalid objectId submitted @ getWorkout()\");\n       callback(\"addWorkoutMessage - Invalid objectId for workoutId\");\n    }\n    else{\n        CardioWorkout.findOne({ _id: workoutId }, function(err, workoutResult){\n\n            if(err || workoutResult === null){\n                callback(\"addWorkoutMessage - No such workout: \" + err);\n            }\n            else{\n                \n                var message = {\n                    type: \"message\", \n                    sender: userName, \n                    senderId: parseInt(userId), \n                    message: themessage \n                }\n\n                workoutResult.feed.push(message);\n                workoutResult.save(function (err) {\n                    if (err) { \n                        console.log(\"addWorkoutMessage - In addWorkoutMessage error(2)\" + err);\n                        callback(\"Error addWorkoutMessage. Stack Trace: \" + err); \n                    }\n                    else{\n                        //console.log(\"In addWorkoutMessage Success\" + err);\n                        callback(workoutResult);      \n                    }      \n                });\n            }\n        });\n    } \n}\n\n\nvar removeWorkoutMessage = function(workoutId, messageId, callback){\n    \n    CardioWorkout.findOne({ '_id' : workoutId, \"feed._id\" :  ObjectId.fromString(messageId)}, function(err, result){\n        if(err || result === null){\n            //console.log(err + \" - \" + result);\n            callback('Failed');\n        }\n        else{\n            CardioWorkout.update({ \"_id\" : workoutId}, { $pull: { feed: { _id :  ObjectId.fromString(messageId)}}}, function(err, result){\n                if(err || result === null){\n                    //console.log(\"User isnt part of this cell. Stack: \" + err );\n                    callback(\"Failed\");\n                }\n                else{ //Memeber not in cell yet, so he can join\n                    callback(result.feed);\n                \n                }\n            });\n        }\n    });\n    \n    \n}\n/////*********************** Social and SEARCH *****************************////\n\n//This will add a user friendship request in the users notification queu\n\nvar getFriendList = function(userId, callback){\n \n    GeneralReference.findOne({ id: userId}, function(err, result){\n        if(err || result === null){\n            console.log(\"addWorkoutMessage - For : \" + userId + \"  \" + err + \" : \" + result);\n            callback(\"Error\");\n        }\n        else{ \n            if(result.friends.length == 0){\n                callback(\"Empty\"); \n            }\n            else{\n                callback(result.friends);    \n            }\n        }\n    });        \n}\n\nvar getUserBasicInfo = function(userId, callback){\n \n    User.findOne({ fbid: userId }, function(err, result){\n        if(err || result === null){\n            //console.log(\"For : \" + userId + \"  \" + err + \" : \" + result);\n            callback(\"Error\");\n        }\n        else{\n            callback(result);\n        }\n    }); \n}\n\nvar getProfileSnippet = function(userId, callback){\n \n    User.findOne({ fbid: userId }, function(err, result){\n        if(err || result === null){\n            //console.log(\"For : \" + userId + \"  \" + err + \" : \" + result);\n            callback(\"Error\");\n        }\n        else{\n            var html = result.firstName + \" \" + result.lastName + \"<br> <span class='btn_viewProfile' userId='\" + \n                result.fbid + \"' style='cursor: pointer;'> View Profile </span>\";\n            callback(html);\n        }\n    }); \n}\n\nvar setUserLatLng = function(userId, lat, lng, callback){\n    \n    User.findOne({ fbid: userId }, function(err, result){\n        if(err || result === null){\n            //console.log(\"For : \" + userId + \"  \" + err + \" : \" + result);\n            callback(\"Error in finding user: \" + err);\n        }\n        else{\n            result.location.latlng.lat = lat;\n            result.location.latlng.lng = lng;\n            \n            result.save(function(err, result){\n                if(err){\n                    callback(\"Error in saving location: Stack: \" + err);        \n                }\n                else{          \n                    callback(\"Success\"); \n                }\n            });\n        }\n    });  \n}\n\n\nvar setUserObjective = function(userId, objective, callback){\n    \n    User.findOne({ fbid: userId }, function(err, result){\n        if(err || result === null){\n            //console.log(\"For : \" + userId + \"  \" + err + \" : \" + result);\n            callback(\"Error in finding user: \" + err);\n        }\n        else{\n            result.objective = objective;\n            \n            result.save(function(err, result){\n                if(err){\n                    callback(\"Error in saving cell: Stack: \" + err);        \n                }\n                else{          \n                    callback(\"Success\"); \n                }\n            });\n        }\n    });  \n}\n\n\n\nvar createCell = function(creatorId, cellObject, userName, callback){\n \n    //console.log('in createCell()');\n    var newCellDetails = new CellDetails({\n        name         : cellObject.name,\n\t    location     : cellObject.location,\n        isPrivate    : cellObject.isPrivate,\n        isCoach      : cellObject.isCoach,\n\t    owner        : {id: creatorId, name: userName}, \n\t    members      : [{fbid: parseInt(creatorId), fullName: userName}],\n\t    description  : cellObject.description \n    });\n    \n    newCellDetails.save(function(err, result){\n        if(err){\n            callback(\"createCell - Error in saving cell: Stack: \" + err);        \n        }\n        else{\n        \n            var newCellRef = new CellReference({\n                name        : cellObject.name,\n                location    : cellObject.location,\n                owner       : {id: creatorId, name: userName}, //creators id\n\t            cellDetails : result._id,\n                isCoach     : cellObject.isCoach\n            });\n            \n            GeneralReference.findOne({ id: creatorId}, function(err, result){\n                if(err || result === null){\n                    callback(\"createCell - Error in finding Users Ref. Stack: \" + err);\n                }\n                else{  \n                    result.cells.push(newCellRef);\n                    result.save(function(err, result){\n                        if(err){\n                            callback(\"createCell - Error in saving cellRef: Stack: \" + err);        \n                        }\n                        else{\n                            callback(\"Success\");       \n                        }\n                \n                    });\n                }\n            \n            });\n        }    \n    });\n}\n//Returns an array with all athletes Cell References\nvar getUsersCells = function(userId, callback){\n    \n    GeneralReference.findOne({ id: userId}, function(err, result){\n        if(err || result === null){\n            callback(\"Error\");\n        }\n        else{\n            if(result.cells.length === 0){\n                callback(\"Empty\");    \n            }\n            else{\n                callback(result.cells);    \n            }\n        }      \n    });\n}\n\nvar getCellDetails = function(cellId, callback){\n    //console.log(\"looking for: \" + cellId);\n    if(cellId.toString().length !== 24 ){\n       //console.log(\"not 24 char\");\n       callback(\"Error\");\n    }\n    else{\n        CellDetails.findOne({ _id: cellId }, function(err, result){\n            if(err || result === null){\n                console.log(err);\n                callback(\"Error\");\n            }\n            else{\n                //console.log(result);\n                callback(result);\n            }\n        });\n    }\n}\n\nvar isCellCoach = function(cellId, userId, callback){\n    //console.log(\"looking for: \" + cellId);\n    if(cellId.toString().length !== 24 ){\n       //console.log(\"not 24 char\");\n       callback(\"Error\");\n    }\n    else{\n        CellDetails.findOne({ _id: cellId }, function(err, result){\n            if(err || result === null){\n                console.log(err);\n                callback(\"Error\");\n            }\n            else{\n                console.log(typeof(userId) + \" vs \" + typeof(result.owner.id)); \n                if(userId === result.owner.id.toString() && result.isCoach){\n                    callback(true);\n                }\n                else{\n                    callback(false);    \n                }\n            }\n        });\n    }\n}\n\nvar joinCell = function(cellId, userId, userName, callback){\n    \n   if(cellId.toString().length !== 24 && isNumber(parseInt(userId)) ){\n       //console.log(\"not 24 char\");\n       callback(\"Error, improper Id\");\n    }\n    else{\n        CellDetails.findOne({ _id: cellId }, function(err, resultCellDetails){\n            if(err || resultCellDetails === null){\n                console.log(\"joinCell - \" + err);\n                callback(\"Error in finding Cell. Stack: \" + err);\n            }\n            else{\n                resultCellDetails.members.push({fbid: parseInt(userId), fullName: userName});\n                resultCellDetails.save(function(err){\n                    if(err){\n                        callback(\"joinCell - Error in saving cellRef: Stack: \" + err);        \n                    }\n                    else{\n                        GeneralReference.findOne({ id: userId }, function(err, result){\n                            if(err || result === null){\n                                callback(\"joinCell - Error in finding User. Stack: \" + err);\n                            }\n                            else{\n                                var newCellRef = new CellReference({\n                                    name        : resultCellDetails.name,\n                                    location    : resultCellDetails.location,\n                                    owner       : resultCellDetails.owner, \n                                    cellDetails : resultCellDetails._id,\n                                    isCoach     : resultCellDetails.isCoach\n                                });\n                                result.cells.push(newCellRef);\n                                result.save(function(err){\n                                    if(err){\n                                        callback(\"joinCell - Error in saving cellRef: Stack: \" + err);        \n                                    }\n                                    else{\n                                        callback(\"Success\");\n                                    }\n                                }); \n                            }\n                        });\n                    }\n                });\n            }\n        });\n    } \n} \n\n\nvar quitCell = function(userId, cellId, callback){\n    //console.log(cellId + \" is \" + typeof(cellId)  +\" at \" + userId );\n    GeneralReference.update({ \"id\" : userId}, { $pull: { cells: { cellDetails :  ObjectId.fromString(cellId)}}}, function(err){\n        if(err){\n            callback(\"User isnt part of this cell. Stack: \" + err );\n        }\n        else{ //Memeber not in cell yet, so he can join\n           CellDetails.update({ \"_id\" : ObjectId.fromString(cellId)}, { $pull: { members: { fbid: userId}}}, {upsert: true}, function(err){    \n                if(err){\n                    callback(\"quitCell - Cant remove user - uid: \" + userId  + \" - cid: \" + cellId);\n                }\n                else{\n                    callback(\"Success\"); \n                }\n            });\n        }\n    });\n\n}\n\nvar addUserInRight = function(arrayOfId, userInviting, callback){\n    \n    if(RealTypeOf(arrayOfId)){\n        for(i=0; i < arrayOfId.length; i++){\n            var newPermission = new Permission();\n            newPermission.id = arrayOfId[i];\n            newPermission.invites = 2;\n            newPermission.save(function(err){\n                if(err) { \n                    console.log('addUserInRight - Error in adding to rights: ' + newPermission.id);\n                }\n                else{\n                    console.log('Added to rights: ' + newPermission.id);\n                }\n            });\n            //Decrease users invites\n            if(i === (arrayOfId.length - 1)){\n                var dec = (arrayOfId.length) * (-1);\n                Permission.update({ \"id\" : userInviting}, { $inc: { invites:  dec}},function(err){    \n                if(err){\n                    //console.log(\"Cant decrease user\");\n                    callback(\"Request executed with an error\");\n                }\n                else{\n                    //console.log(\"Success\"); \n                    callback(\"Success\");\n                }\n            });\n            }\n        }\n    }\n    else{\n        callback(\"Improper data was sent.\");\n    }\n \n}\n\nvar pushToNotificationLog = function (error){\n    console.log('in push to not log'); \n    var newError = new Log();\n    newError.notificationError.push(error);\n    newError.save(function(err){\n        if(err) {\n            console.log('pushToNotificationLog - Cant save to notification error log'); \n        }\n        else{\n           \n        }\n    });\n    \n}\n\n\n/// Random functions\n\n//Validates numbers\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n\n\nvar checkIfUserInCell = function(cellId, userId, callback){\n     GeneralReference.findOne({ \"id\" : parseInt(userId), \"cells.cellDetails\" : ObjectId.fromString(cellId)}, function(err, result){\n        if(err){ \n            callback(\"Failed\");\n        }\n        else if(result === null){\n            callback(userId);\n        }\n        else{\n            callback(\"Existant\");\n        }\n     });\n\n}\n\nvar isUserAFriend = function(userId, target, callback){\n    \n    GeneralReference.findOne({ id: userId}, function(err, result){\n        if(err || result === null){\n            console.log(\"For : \" + userId + \"  \" + err + \" : \" + result);\n            callback(false);\n        }\n        else{ \n            if(result.friends.length === 0){\n                callback(false); \n            }\n            else{\n                var response = false;\n                for(i = 0; i < result.friends.length;i++){\n                    //console.log(result.friends[i]);\n                    if(result.friends[i] === parseInt(target)){\n                        response = true;  \n                        break;\n                    }\n                }\n                callback(response);\n            }\n        }\n    }); \n        \n}\n\n//Taken from http://joncom.be/code/realtypeof/\nfunction RealTypeOf(v) {\n  if (typeof(v) == \"object\") {\n    if (v === null) return \"null\";\n    if (v.constructor == (new Array).constructor) return \"array\";\n    if (v.constructor == (new Date).constructor) return \"date\";\n    if (v.constructor == (new RegExp).constructor) return \"regex\";\n    return \"object\";\n  }\n  return typeof(v);\n}\n\n\n/*\nvar getCellStats = function(objectId){\n    \n    CellDetails.findOne({ _id: objectId }, function(err, result){\n        if(err || result === null){\n            callback(\"Error\");\n        }\n        else{\n            var stat = {\n                memberSize   : result.members.length,\n                calendarSize : result.activities.length\n            }\n            callback(stat);\n        }\n    });\n    \n}*/\n\n//*****************Exports*****************************************\nexports.saveParcour = saveParcour;\nexports.getParcourList = getParcourList; \nexports.getParcour = getParcour;\nexports.deleteParcour = deleteParcour;\n\nexports.saveWorkout = saveWorkout;\nexports.saveEvent = saveEvent;\nexports.getWorkout = getWorkout;\nexports.getMonthEvent = getMonthEvent;\nexports.saveResults = saveResults;\nexports.deleteWorkout = deleteWorkout;\nexports.deleteEvent = deleteEvent;\nexports.saveCellEvent = saveCellEvent;\nexports.getCellMonthEvent = getCellMonthEvent;\nexports.leaveWorkout = leaveWorkout;\nexports.deleteCellEvent = deleteCellEvent;\nexports.joinCellWorkout = joinCellWorkout;\n\nexports.getUserBasicInfo = getUserBasicInfo;\nexports.getCellDetails = getCellDetails;\nexports.createCell = createCell;\nexports.getUsersCells = getUsersCells;\nexports.joinCell = joinCell;\nexports.quitCell = quitCell;\nexports.addWorkoutMessage = addWorkoutMessage;\n\nexports.isCellCoach = isCellCoach;\nexports.isUserAFriend = isUserAFriend;\nexports.getProfileSnippet = getProfileSnippet;\nexports.getFriendList = getFriendList;\nexports.setUserLatLng = setUserLatLng;\nexports.setUserObjective = setUserObjective;\nexports.addUserInRight =  addUserInRight;\n\nexports.getWorkoutCoachMode = getWorkoutCoachMode;\nexports.checkIfUserInCell = checkIfUserInCell;\nexports.pushToNotificationLog =  pushToNotificationLog;\nexports.removeWorkoutMessage = removeWorkoutMessage;"]],"start1":0,"start2":0,"length1":0,"length2":50353}]],"length":50353}
