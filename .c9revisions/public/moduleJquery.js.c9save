{"ts":1340576058386,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"panelState = 'largeCalendar';\np = 0;\nvar appStatus = {needsFetch: true, lastFetchedMonth: \"none\"};\n//Data for ajax intervall content\nvar intervall = new Array();\nvar tempCell = new Array();\nvar tempIntDesc = [];\nvar selectedMap = \"no map\"; \nvar x = \"\";\nvar y = \"\";\nvar s = \"\";\n//Data for intervall list\nvar tempIntervall = [];\nvar minSlider = 0;\nvar maxSlider = 0;\n\nvar applicationVariables = {\n    calendarFirstLoad   : true,\n    calendarMode        : \"user\", //or cell\n    currentCell         : \"none\",\n    coachMode           : false,\n    droppedWorkoutId    : \"\",\n    timezone            : new Date().getTimezoneOffset()/60,\n    feedPage            : 2,\n    selectedElements    : 0,\n    intervallInput      : [],\n    intervallSliderUsed : false,\n    profile             : { \n        location: \"none\", \n        objective: \"none\", \n        colors: {bike: \"#CCCCCC\", swim: \"#99CCFF\", run: \"#CC9966\", cell: \"#C24747\"} \n        }\n}\n\n//Global functions, declared in jquery init\nvar updateCalendar;\nvar addIntervallInput;\n\n$(document).ready(function(){\n        \n        //Internet explorer warning\n       //Internet Explorer check\n        var Browser = {\n            Version: function() {\n                var version = 999; // we assume a sane browser\n                if (navigator.appVersion.indexOf(\"MSIE\") != -1)\n                  // bah, IE again, lets downgrade version number\n                  version = parseFloat(navigator.appVersion.split(\"MSIE\")[1]);\n                return version;\n                }\n        }\n         \n         \n        if (Browser.Version() >= 7) {\n            if (Browser.Version() !== 999) {\n                Notifier.warning(\"You are using IE, get Google Chrome for a better experience\");\n            }\n        }\n        else{\n           Notifier.error(\"You shouldn't be here using Internet Explorer 6 or 7, upgrade to Google Chrome\");  \n        } \n        \n        \n        \n        //----Jcalendar initialisation ----------------------//\n        //\n        //\n        //--------------------------------------------------//\n        \n\t\t$('#fullcalendar').fullCalendar({\n\t\t\t// put your options and callbacks here\n\t\t\theight: 600,\n\t\t\ttheme: true,\n            editable: true,\n            ignoreTimezone: false,\n\t\t\teventClick: function(event) {\t\n\t\t\t\tif (event.url) {\n\t\t\t\t//the launched function readjusts UI and send httprequest for view\n\t\t\t\t//UIreposition(event); //event.url, event.start, event.end, event._id);\n\t\t\t\tmoveUI('View');\n                \n                $.getJSON(event.url, function(workout) {\n                    initView(workout, event);       \n                });\n                \n                return false;\n\t\t\t    }\n            },     \n            viewDisplay: function(view) {\n                //Essential for first load, or calendar loads to fast without Fb authentication and cant find data\n                if(applicationVariables.calendarFirstLoad){\n                    setTimeout(function() {\n                        updateCalendar(function(res){});\n                        updateUnreadNotifications();\n                    }, 1000);\n                    applicationVariables.calendarFirstLoad = false;\n                }\n                else{\n                    updateCalendar(function(res){\n                        \n                        if(panelState === 'Stats'){\n                            //console.log(res);\n                            fillStatsPage(res);\n                        }  \n                        \n                    });\n                }\n            },\n            eventDragStart: function(event, jsEvent, ui, view) {    \t\t\n\t\t\t    //var x = isElemOverDiv(ui, $('div.external-events'));\n\t\t\t    applicationVariables.droppedWorkoutId = event.refWorkout;\t\t\t\n\t\t\t    $('#fullcalendar').fullCalendar('revertEvent', jsEvent);\n                $('#drophere').show();\n\t\t\t    \t\t\n\t\t    },\n            eventDragStop: function (event, jsEvent, ui, view ) {\n                $('#drophere').hide();\n            }\n\t\t});\n        \n        //--------------------------------------------------------\n        //      Profile loading\n        //--------------------------------------------------------\n        \n        var loadProfile = function(){\n            \n            $.getJSON(getYourProfile, function(data) {\n                if(data.success){\n\n                    setUsersLatLng(data.message.location, function(callback){\n                        if(callback === \"Failed\"){\n                            Notifier.error('Could initiate profile properly');\n                        }\n                        else if(callback === 'Already instantiated'){\n                            applicationVariables.profile.location =  data.message.location;\n                            applicationVariables.profile.objective = data.message.objective;\n                            applicationVariables.profile.colors = data.message.colors;\n                        }\n                        else{\n                            //alert('posting new latlng: ' + JSON.stringify(callback));\n                            $.getJSON(postUserLocation + callback.lat + \"/\" + callback.lng, function(data) {\n                                if(data.success){\n                                    applicationVariables.profile.location =  data.message.location;\n                                }\n                                else{\n                                    Notifier.error('Error in updating your profile location.');\n                                }\n                            });\n                            applicationVariables.profile.objective = data.message.objective;\n                            applicationVariables.profile.colors = data.message.colors;\n                        }\n                    });\n                }\n                else{\n                //something wrong\n                Notifier.success(data.message);\n                }   \n            }); \n \n        }\n        \n        loadProfile();\n        \n        \n        //--------------------------------------------------------\n        //      Rounded corner initialisation\n        //--------------------------------------------------------\n        \n\t\t$('#mainContent').corner();\n\t\t$('#xfbmlPic').corner();\n        $('#cellMessageInput').corner(\"5px\");\n        $('#workoutMessageInput').corner(\"5px\");\n        $('#searchDiv').corner(\"5px\");\n        \n        //--------------------------------------------------------\n        //      Input restriction\n        //--------------------------------------------------------\n        \n        var bindInputBlocker = function(){\n            jQuery('.numbersOnly').die();    \n            jQuery('.numbersOnly').keyup(function () { \n                this.value = this.value.replace(/[^0-9\\.]/g,'');\n            });\n            \n            jQuery('.numbersOnly').blur(function () { \n                \n                if($(this).hasClass('quantityValue')){\n                    if($(this).val() === '' || $(this).val() === '0'){\n                        $(this).val('1'); \n                    }\n                    else{\n                        //$(this).val('1');   \n                    }\n                }\n                else{\n                    if($(this).val() === ''){\n                        $(this).val('1'); \n                    }\n                    else{\n                        //$(this).val('0');   \n                    } \n                }\n                \n            });\n            \n            $('.quantityValue').die();\n            $('.quantityValue').click(function(){\n                console.log(this);\n                if($(this).attr('value') === '1'){\n                    $(this).attr('value', '');\n                }\n            });\n            \n        }\n        \n        bindInputBlocker();\n        \n        //You can only enter numerical number in the field with this event\n    \t$(\"input[type=text][id=unitInput]\").keydown(function(event) {\n\t\t\t// Allow only backspace and delete\n\t\t\tif ( event.keyCode == 46 || event.keyCode == 8 ) {\n\t\t\t\t// let it happen, don't do anything\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Ensure that it is a number and stop the keypress\n\t\t\t\tif (event.keyCode < 48 || event.keyCode > 57 ) {\n\t\t\t\t\tevent.preventDefault(); \n\t\t\t\t}   \n\t\t\t}\n\t\t});\n        \n        //Restricts the user from putting a / in the name, because the route to\n        //get a map will be messed up if using theres a / in the name\n        jQuery('#courseName').keyup(function () { \n            this.value = this.value.replace(/[/]/g,'');\n        });\n        \n       \n\n\n        //--------------------------------------------------------\n        //       Carousel initiation (jcarousel)  \n        //       http://sorgalla.com/projects/jcarousel/\n        //--------------------------------------------------------\n        \n        $('#mycarousel').jcarousel({\n            //initCallback: initCallbackFunction\n            \n        });\n        \n        /*function initCallbackFunction(carousel, state) {\n            $('#mycarousel').click(function() {\n                var idx = $(this).data('index');\n                carousel.scroll(idx);\n                return false;\n            });\n        };*/\n        /*\n         $('#mycarousel').hover(function(){\n            // $('#mycarousel').jcarousel('scroll', $('#mycarousel').index);\n            var idx = $(this).data('index');\n            carousel.scroll(idx);\n         });*/\n        \n        \n        \n        \n\t\t//Date picker is ISO 8601\n\t\t$.datepicker.setDefaults({ dateFormat: 'yy-mm-dd' });\n\t    $( \"#datepicker\" ).datepicker();\n\t\t$('#timepickerStart').timepicker({timeFormat: 'hh:mm', stepMinute: 5});\n\t\t$('#timepickerStop').timepicker({timeFormat: 'hh:mm', stepMinute: 5});\n\n\t\t/* To redo later, intent is to block entry of over time smaller then start time\n\t\t$('#timepickerStop').click(function(){\n\t\tvar time = $('#timepickerStart').datetimepicker('getDate');\n\t\tvar hours = time.getHours();\n\t\t$('#timepickerStop').timepicker({ hourMin: 5});\n\t\t//alert(hours);\n\t\t}); */\n\n\t\t$( \"#radio, #radio1, #radio2, #radio3,#radio4\" ).buttonset();\n\t\t$( \"#accordion\" ).accordion({ autoHeight: false });\n\n\t\tvar buttons = $('#push, #check, #clearMap, #saveMap, #addIntervall, #removeIntervall').button();\n\n\t\t\n        //// !!!---------------App  Dialog\tdeclarations ------------------///\n        //\n        //\n        // !!!--------------------------------------------------------------///\n        \n\t\t$('#dialog').dialog({\n\t\t\tautoOpen: false,\n\t\t\twidth: 600,\n\t\t\tbuttons: {\n\t\t\t\t\"Ok\": function() { \n\t\t\t\t\t$(this).dialog(\"close\"); \n\t\t\t\t}, \n\t\t\t\t\"Cancel\": function() { \n\t\t\t\t\t$(this).dialog(\"close\"); \n\t\t\t\t} \n\t\t\t}\n\t\t});\n\n        $('#userOptionDialog').dialog({\n    \t\tautoOpen: false,\n\t\t\twidth: 600,\n            resizable: false,\n            draggable: false,\n            modal: true,\n            position: {\n                my: \"center\",\n                at: \"center\",\n                of: window\n            },\n            open: function(){ \n                $('#cellInfo').qtip(\"hide\"); \n                $(\"#goToSocial\").qtip(\"hide\");\n                $('#editProfileObjective').html(applicationVariables.profile.objective);\n                //$('#colorInput').html(\"Bike <input class='color' size='1'  />\");\n                document.getElementById('bikeColor').color.hidePicker();\n            },\n            beforeClose: function(){ \n                $('#cellInfo').qtip(\"show\");\n                $(\"#goToSocial\").qtip(\"show\");\n            },\n\t\t\tbuttons: {\n\t\t\t\t\"Ok\": function() { \n\t\t\t\t\t$(this).dialog(\"close\"); \n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Dialog Link\n\t\t$('#dialog_link').click(function(){\n\t\t\t$('#dialog').dialog('open');\n\t\t\treturn false;\n\t\t});\n        \n        $('#inviteFriends').dialog({\n        \tautoOpen: false,\n\t\t\twidth  : 550,\n            height : 500,\n            resizable: false,\n            draggable: false,\n            modal: true,\n            position: {\n                my: \"center\",\n                at: \"center\",\n                of: window\n            },\n            open: function(){ \n                $('#cellInfo').qtip(\"hide\"); \n                $(\"#goToSocial\").qtip(\"hide\");\n            },\n            beforeClose: function(){ \n                $('#cellInfo').qtip(\"show\");\n                $(\"#goToSocial\").qtip(\"show\");\n            },\n\t\t\tbuttons: {\n\t\t\t\t\"Ok\": function() { \n                    var jsonToSend = getSelectedElements('friendPic', 'inviteFriendList');\n                    \n                    if(jsonToSend.length === 0){\n                        Notifier.error(\"You haven't selected anyone.\");    \n                    }\n                    else{\n                        $.ajax({\n                            url: inviteToCell + applicationVariables.currentCell + \"/\" + $('#cellTitle').html() + \"/\",\n                            type: \"POST\",\n                            dataType: \"json\",\n                            data: JSON.stringify(getSelectedElements('friendPic', 'inviteFriendList')),\n                            contentType: \"application/json\",\n                            cache: false,\n                            timeout: 5000,\n                            complete: function() {\n                                //called when complete\n                                Notifier.info('Saving ...');\n                            },\n                            success: function(data) {\n                                //var res =jQuery.parseJSON(data);\n                                //callback('Sending: ' + data);\n                                if(data.success){\n                                    Notifier.success(data.message);\n                                     callback(data.success);\n                                }\n                                else{\n                                   Notifier.error(data.message); \n                                   callback(data.success);\n                                }\n                            },\n            \n                            error: function() {\n                                //callback('Operation failed');\n                                Notifier.error('Could not send data to server');\n                                 callback(false);\n                            },\n                        });\n                    }\n                    \n                    document.getElementById('inviteFriendList').innerHTML = \"\";\n                    applicationVariables.selectedElements = 0;\n                    $(this).dialog(\"close\"); \n\t\t\t\t}, \n\t\t\t\t\"Cancel\": function() { \n\t\t\t\t\t$(this).dialog(\"close\"); \n\t\t\t\t} \n\t\t\t}\n\t\t});\n    \n        \n        $('#createCellDialog').dialog({\n    \t\tautoOpen: false,\n\t\t\twidth  : 400,\n            height : 500,\n            resizable: false,\n            draggable: false,\n            modal: true,\n            position: {\n                my: \"center\",\n                at: \"center\",\n                of: window\n            },\n            open: function(){ \n                $(\"#goToSocial\").qtip(\"hide\");\n            },\n            beforeClose: function(){ \n                $(\"#goToSocial\").qtip(\"show\");\n            },\n\t\t\tbuttons: {\n\t\t\t\t\"Ok\": function() { \n\t\t\t\t\tpostJson(JSON.stringify(grabNewCellInput()), postCell, function(){\n                        intiSocialView(false, false, true);\n                    });\n                    $(this).dialog(\"close\"); \n\t\t\t\t}, \n\t\t\t\t\"Cancel\": function() { \n\t\t\t\t\t$(this).dialog(\"close\"); \n\t\t\t\t} \n\t\t\t}\n\t\t});\n        \n        // Dialog        \t\n        $('#searchDialog').dialog({\n        \tautoOpen: false,\n        \twidth  : 500,\n            height : 500,\n            resizable: false,\n            draggable: false,\n            modal: true,\n            position: {\n                my: \"center\",\n                at: \"center\",\n                of: window\n            },\n            open: function(){ \n                $(\"#goToSocial\").qtip(\"hide\");\n                $(\"#goToSearch\").qtip(\"hide\");\n            },\n            beforeClose: function(){ \n                $(\"#goToSocial\").qtip(\"show\");\n            }\n        \n        });   \n\n        //--------------------------------------------------------------------\n        //\n        //    jquery editable\n        //\n        //--------------------------------------------------------------------\n        \n        //Functions used by editable\n        function updateObjective(content){\n            if(content.current !== content.previous){\n                $.getJSON(postUserObjective + content.current, function(data) {\n                    if(data.success){\n                        //successfully updated\n                        applicationVariables.profile.objective = content.current;\n                    }\n                    else{\n                    //something wrong\n                        Notifier.error(data.message);\n                    }   \n                }); \n            }\n            else{\n                //Do nothing, content hasnt changed    \n            }\n\n        }\n         \n        //editable componenets instatiation\n        $('#editProfileObjective').editable({\n            submit:'save',\n            cancel:'cancel',\n            editClass:'resultItem',\n            onSubmit:updateObjective\n        });\n\n        //--------------------------------------------------------------------\n        //\n        //    Sliders area\n        //\n        //--------------------------------------------------------------------\n\n\t\t$( \"#sliderIntensity\" ).slider({\n\t\t\t//orientation: \"horizontal\",\n\t\t\trange: \"min\",\n            step: 5,\n\t\t\tmin: 0,\n\t\t\tmax: 100,\n\t\t\tvalue: 40,\n\t\t\tslide: function( event, ui ) {\n\t\t\t\tdocument.getElementById('intensityHtml').innerHTML = ui.value;\n\t\t\t}\n\t\t});\n\n\t\t$( \"#sliderIntensity2\" ).slider({\n\t\t\torientation: \"horizontal\",\n\t\t\trange: \"min\",\n            step: 5,\n\t\t\tmin: 0,\n\t\t\tmax: 100,\n\t\t\tvalue: 40,\n\t\t\tslide: function( event, ui ) {\t\n\t\t\t\tdocument.getElementById('intensityHtml2').innerHTML = ui.value;\n\t\t\t}\n\t\t});\n        \n        \n        ///-----------------------------------------------------------------////\n        //\n        // ***** UNIT Conversition code when inputing distance workout *******\n        //\n        //-----------------------------------------------------------------////\n        \n        function qtipUnitHelperContent(){\n            if($('#radioTime').is(':checked') === true ){\n                timeToSec($('#bigInput').val(), $('#smallInput').val(), function(res){\n                     //$('#bigInput').qtip({content: { text: res + ' seconds' }});\n                    $('#distanceOutDelimiter').qtip({\n                        content: {\n                            text: res + ' minutes'\n                        },\n                        show: {\n                            ready: true\n                        },\n                        style: {\n                            widget: true \n                        },\n                        position: {\n                            my: 'right center',\n                            at: 'left center'\n                        },\n                        hide: {\n    \t                    event: 'unfocus',\n                            delay: 2000\n\t                    }\n                    });   \n\n                });\n                //var qtip = jQuery('#bigInput').qtip('api');\n                //qtip.show();\n            }\n            else{\n                toMeters($('#bigInput').val(), $('#smallInput').val(), function(res){\n                    //$('#bigInput').qtip({content: { text: res + ' meters or ' + (Math.round(1.609344*parseFloat(res/1000))*100)/100 + ' miles' }, show: true});\n                    $('#distanceOutDelimiter').qtip({\n                        content: {\n                            text: res + ' meters (' + (Math.round(0.621371192*parseFloat(res/1000)*100)/100) + ' miles)' \n                        },\n                        show: {\n                            ready: true\n                        },\n                        style: {\n                            widget: true \n                        },\n                        position: {\n                            my: 'right center',\n                            at: 'left center'\n                        },\n                        hide: {\n                            event: 'unfocus',\n                            delay: 2000\n\t                    }\n                    });\n                });\n            }  \n        }\n        \n        $('#distanceOutDelimiter').live('mouseenter', function(){\n            qtipUnitHelperContent();\n        });\n        \n        \n        //Event handlers for displaying a qtip with minute/meter coversion\n        $('.qtipUnitHelper').bind('focus keypress change keydown keyup click', function(){\n    \t\t  qtipUnitHelperContent();\n           \n\t\t});\n        \n        $('.qtipUnitHelper').bind('blur', function(){\n            var qtip = jQuery('#distanceOutDelimiter').qtip('api');\n            qtip.hide();\n            \n        });\n        \n        \n        /*\n        $('.qtipUnitHelper').keyup(function(){\n        \t  qtipUnitHelperContent();\n            \n\t\t});*/\n        \n        //-------------------MAP RELATED JQUERY -----------------------------//\n        //\n        //\n        //--------------------------------------------------------------------\n        \n        $('#elevationGraph').qtip({\n            content: {\n                text: \"Not initalized\" \n            },\n            show: {\n                ready: false\n            },\n            style: {\n                widget: true \n            },\n            position: {\n                my: 'left center',\n                at: 'right center'\n            }\n        });\n        \n        // Remove last added segment on map trace\n    \t$('#undoTrace').click(function(){\n\t\t\tundoLast();\n\t\t});\n        \n\t\t// Event for when press delete icon\n\t\t$('#deleteTrace').click(function(){\n\t\t\tclearMap();\n\t\t});\n\n\t\t// Event for when press delete icon\n\t\t$('#bikeTrace').click(function(){\n\t\t\tif(bikeLayer.getMap() === null){\n\t\t\t\tbikeLayer.setMap(map);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tbikeLayer.setMap(null);\n\t\t\t}\n\t\t});\n\n\t\t$('#saveTrace').click(function(){\n\n\t\t\t//generate json format\n\t\t\t//poly is a global variable declared in moduleGmap\n\t\t\t//Essential to brake circular reference, else stringify will fail\n\t\t\tpoly.setMap(null);\n\t\t\tvar polypathObject = google.maps.geometry.encoding.encodePath(poly.getPath());//.getArray();\n\t\t\tvar markersObject;             \n    \t\tvar nameOfCourse = $(\"input[type=text][id=courseName]\").val();\n\t\t\tvar totalDistance = document.getElementById('distance').innerHTML;\n            var staticMap = \"http://maps.googleapis.com/maps/api/staticmap?size=300x300&sensor=false&path=weight:3%7Ccolor:red%7Cenc:\" + polypathObject;\n            //Transform the golbal variable of marker to a non circular json \n            markertTitleArray(markerArray, function(titleArray){\n               \n               markerLatLngArray(markerArray, function(latArray){\n               \n                    markersObject = { titles: titleArray, latlng: latArray };\n                    staticMap = staticMap + markerString;\n               });\n            });\n            \n            if(nameOfCourse === 'Save course as ...' || nameOfCourse === ' '){\n                nameOfCourse = \"MyCourse\" + $('#dropdownMap option').length;  \n            }\n            \t\t\t\n\t\t\tif(polypathObject.length === 0 || markerArray.length === 0 || nameOfCourse === \"\" ){\n\n\t\t\t    //alert(\"Missing data Entry. Create course or make sure a name is entered\");\n\t\t\t    Notifier.error(\"Please fill in all required inputs\");\n\t\t\t}\n            else{\n                \n                var object =  {\n                 \n                    markers   : markersObject,\n                    path      : polypathObject,\n                    staticUrl : staticMap\n                }\n                \n\t\t\t\tvar httpRequestUrl = restPost_newParcour + nameOfCourse + \"/\" + totalDistance; \n\n\t\t\t\t//Essential to break circular reference, else stringify will fail\n\t\t\t\tclearMap();\n\n\t\t\t\t//Send to server via httppost\t\t\t\n                postJson(JSON.stringify(object), httpRequestUrl, function(){\n                   //reinitialise maps and lcear ui\n                   distance = 0;\n                   markerArray = [];\n                   lastAddedDistance = [];\n                   markerString = \"\";\n                   $(\"#courseName\").val('Save course as ...');\n                   document.getElementById('distance').innerHTML = \"0\";\n                   //populate dropdowns with new user data\n                   refreshDropdown();\n                });\n\t\t\t}\n\n\t\t});\n        \n        //To send a delete trace to server\n        $('#unSaveTrace').click(function(){\n           var parcourId = $(\"#dropdownMap\").val();\n           \n           $.getJSON(deleteParcour + parcourId, function(data) {\n                if(data.success){\n                    Notifier.success(data.message);\n                    refreshDropdown();\n                    //distance = 0;\n                    //markerArray = [];\n                    //lastAddedDistance = [];\n                    $(\"#courseName\").val('');\n                    document.getElementById('distance').innerHTML = \"0\";\n                }\n                else{\n                //something wrong\n                    Notifier.error(data.message);\n                }   \n            }); \n        });\n        \n        \n        $(\"#dropdownMap\").change(function() { \n            \n            var url = getParcour + $(this).val();\n            $.get(url, function(data){\n                clearMap();\n                distance = 0;\n                markerArray = [];\n                decodeToMap(data.path)\n                loadMarkers(data.markers.latlng, data.markers.titles);\n                map.setCenter(new google.maps.LatLng(data.markers.latlng[0].lat, data.markers.latlng[0].lng));\n                document.getElementById('distance').innerHTML = data.distance;\n                calculateAltitude(latlngArray);\n            }, \"json\");\n\n        }); \n        \n        \n        //------------- Intervall interface logic -----------------------------\n        //\n        //---------------------------------------------------------------------\n        \n\n        \n        \n        addIntervallInput = function(metricType, metricValue, targetType, targetValue, intervallDescription, quantity, minSec, maxSec){\n            \n            var firstOption = '<select class=\"metricType\" element=\"0\"><option value=\"m\">meters</option><option value=\"s\">seconds</option><option value=\"min\">minutes</option></select>';\n            var secondOption = '<select class=\"targetType\" element=\"0\"><option value=\"none\">none</option><option value=\"calorie\">calories</option><option value=\"rpm\">rpm</option><option value=\"kmh\">km/h</option><option value=\"bpm\">bpm</option><option value=\"range\">range</option><option value=\"%\" >%</option><option value=\"watt\">watt</option></select>';\n            var theMetricValue = metricValue;\n            \n            var quantityValue = quantity;\n            \n            if(quantity === \"\"){\n               quantityValue = 1; \n            }\n            \n            \n            if(targetType === \"m\"){\n                firstOption =  '<select class=\"metricType\" element=\"0\"><option value=\"m\" selected=\"selected\">meters</option><option value=\"s\">seconds</option><option value=\"min\">minutes</option></select>';   \n            }\n            if(targetType === \"min\"){\n                firstOption =  '<select class=\"metricType\" element=\"0\"><option value=\"m\">meters</option><option value=\"s\">seconds</option><option value=\"min\" selected=\"selected\">minutes</option></select>';   \n            }\n            else{\n                firstOption =  '<select class=\"metricType\" element=\"0\"><option value=\"m\" >meters</option><option value=\"s\" selected=\"selected\">seconds</option><option value=\"min\">minutes</option></select>';\n            }\n            \n            \n            if(metricType === \"%\"){\n                secondOption = '<select class=\"targetType\" element=\"0\"><option value=\"none\">none</option><option value=\"calorie\">calories</option><option value=\"rpm\">rpm</option><option value=\"kmh\">km/h</option><option value=\"bpm\">bpm</option><option value=\"range\">range</option><option value=\"%\" selected=\"selected\">%</option><option value=\"watt\">watt</option></select>'\n            }\n            else if(metricType === \"range\"){\n                secondOption = '<select class=\"targetType\" element=\"0\"><option value=\"none\">none</option><option value=\"bpm\">bpm</option><option value=\"range\" selected=\"selected\">range</option><option value=\"%\">%</option><option value=\"watt\">watt</option></select>'\n                minValueHtml = '<span class=\"intervallMin\" seconds=\"' + minSec + '\">' + Math.floor(minSec / 60) +\":\" + (minSec - (Math.floor(minSec / 60) * 60)) + '</span>';\n                maxValueHtml = '<span class=\"intervallMax\" seconds=\"' + maxSec + '\">' + Math.floor(maxSec / 60) +\":\" + (maxSec - (Math.floor(maxSec / 60) * 60)) + '</span>';\n                theMetricValue = minValueHtml + \" - \" + maxValueHtml + \" min\";\n            }\n            else if(metricType === \"watt\"){\n                secondOption = '<select class=\"targetType\" element=\"0\"><option value=\"none\">none</option><option value=\"calorie\">calories</option><option value=\"rpm\">rpm</option><option value=\"kmh\">km/h</option><option value=\"bpm\">bpm</option><option value=\"range\">range</option><option value=\"%\">%</option><option value=\"watt\" selected=\"selected\">watt</option></select>'       \n            }\n            else if(metricType === \"bpm\"){\n                secondOption = '<select class=\"targetType\" element=\"0\"><option value=\"none\">none</option><option value=\"calorie\">calories</option><option value=\"rpm\">rpm</option><option value=\"kmh\">km/h</option><option value=\"bpm\" selected=\"selected\">bpm</option><option value=\"range\">range</option><option value=\"%\">%</option><option value=\"watt\">watt</option></select>'\n            }\n            else if(metricType === \"rpm\"){\n                secondOption = '<select class=\"targetType\" element=\"0\"><option value=\"none\">none</option><option value=\"calorie\">calories</option><option value=\"rpm\" selected=\"selected\">rpm</option><option value=\"kmh\">km/h</option><option value=\"bpm\" >bpm</option><option value=\"range\">range</option><option value=\"%\">%</option><option value=\"watt\">watt</option></select>'\n            }\n            else if(metricType === \"kmh\"){\n                secondOption = '<select class=\"targetType\" element=\"0\"><option value=\"none\">none</option><option value=\"calorie\">calories</option><option value=\"rpm\">rpm</option><option value=\"kmh\"  selected=\"selected\">km/h</option><option value=\"bpm\">bpm</option><option value=\"range\">range</option><option value=\"%\">%</option><option value=\"watt\">watt</option></select>'\n            }\n            else if(metricType === \"calorie\"){\n                secondOption = '<select class=\"targetType\" element=\"0\"><option value=\"none\">none</option><option value=\"calorie\"  selected=\"selected\">calories</option><option value=\"rpm\">rpm</option><option value=\"kmh\">km/h</option><option value=\"bpm\">bpm</option><option value=\"range\">range</option><option value=\"%\">%</option><option value=\"watt\">watt</option></select>'\n            }\n            else{\n                //secondOption = '<select class=\"targetType\" element=\"0\"><option value=\"none\" selected=\"selected\">none</option><option value=\"bpm\">bpm</option><option value=\"range\">range</option><option value=\"%\">%</option><option value=\"watt\">watt</option></select>'\n            }\n\n\n        \n            var html = '<div class=\"intervallInputElement\"><div style=\"float: left; width: 150px;\" class=\"targetDiv\">'+ firstOption +'<input type=\"text\" class=\"metricValue numbersOnly\" size=\"1\" value=\"' + targetValue +'\">&nbsp;<input type=\"text\" class=\"quantityValue numbersOnly\" size=\"1\" value=\"' + quantityValue +'\"></div><div class=\"metricDiv\" style=\"float: left; width: 180px;\">' + \n                secondOption +'<span class=\"targetValue\">' + theMetricValue + '</span></div><div style=\"float: left; width: 110px\" class=\"descContainer\"> <input type=\"text\" class=\"intervallDescription\" element=\"0\" size=\"13\" value=\"' + intervallDescription + '\"></div><div class=\"removeIntervallIcon\"' + \n                'style=\"float: left; width: 20px; cursor: pointer\"><span class=\"ui-icon ui-icon-closethick\"></span></div><div class=\"sliderIntervallContainer\" style=\"margin-right: 200px; display: none; float:right;\"></div></div>'    \n           \n            $('#intervallInputContainer').append(html);\n            \n            //kill any previous handler so theres no snowball effect\n            $('.removeIntervallIcon').die();\n            \n            $('.removeIntervallIcon').click(function(){\n                $(this).parent().remove();\n\t\t    });\n            \n            \n            refreshSlider();\n            \n            bindInputBlocker();\n           \n        }\n        \n        var refreshSlider = function(){\n        \n            $('.metricDiv').die();\n            $('.targetType').die();\n        \n            $('.targetType').change(function(){\n\n                var parent = $(this).closest('.metricDiv');\n                var value = $(this).val();\n                var sliderContainer = $(this).closest('.metricDiv').closest('.intervallInputElement').children('.sliderIntervallContainer');\n                sliderContainer.show();\n                \n                $(\"#sliderIntervallIntensity\").slider(\"destroy\");\n                $(\"#sliderIntervallIntensity\").remove();\n                \n                sliderContainer.append('<div id=\"sliderIntervallIntensity\" style=\"width:100px;\"></div>');\n                \n                if(value === \"bpm\"){\n    \n                     $(\"#sliderIntervallIntensity\" ).slider({\n                        disabled: false, range: \"min\",\n                        step: 5,\n                        min: 0, max: 300, value: 150,\n                        slide: function(event, ui){   \n                             parent.children('.targetValue').html(ui.value);\n                        },\n                        stop: function(event, ui) { \n                            $(this).hide();\n                        }\n                     });\n                     parent.children('.targetValue').html(150);\n                     //createQtip(parent);\n                     \n                }\n                else if(value === \"watt\"){\n                     $(\"#sliderIntervallIntensity\" ).slider({\n                        disabled: false, range: \"min\",\n                        step: 5,\n                        min: 0, max: 600, value: 300,\n                        slide: function(event, ui){ \n                             parent.children('.targetValue').html(ui.value);\n                        },\n                        stop: function(event, ui) { \n                            $(this).hide();\n                        }\n                     });\n                     parent.children('.targetValue').html(300);\n                     //createQtip(parent);\n                }\n                else if(value === \"%\"){\n                     $(\"#sliderIntervallIntensity\" ).slider({\n                        disabled: false, range: \"min\",\n                        step: 5,\n                        min: 0, max: 100, value: 50,\n                        slide: function(event, ui){ \n                             parent.children('.targetValue').html(ui.value);\n                        },\n                        stop: function(event, ui) { \n                            $(this).hide();\n                        }\n                     });\n                     parent.children('.targetValue').html(50);\n                     //createQtip(parent);\n                }\n                else if(value === \"calorie\"){\n                     $(\"#sliderIntervallIntensity\" ).slider({\n                        disabled: false, range: \"min\",\n                        step: 50,\n                        min: 0, max: 1200, value: 500,\n                        slide: function(event, ui){ \n                             parent.children('.targetValue').html(ui.value);\n                        },\n                        stop: function(event, ui) { \n                            $(this).hide();\n                        }\n                     });\n                     parent.children('.targetValue').html(50);\n                     //createQtip(parent);\n                }\n                else if(value === \"rpm\"){\n                     $(\"#sliderIntervallIntensity\" ).slider({\n                        disabled: false, range: \"min\",\n                        step: 5,\n                        min: 0, max: 120, value: 50,\n                        slide: function(event, ui){ \n                             parent.children('.targetValue').html(ui.value);\n                        },\n                        stop: function(event, ui) { \n                            $(this).hide();\n                        }\n                     });\n                     parent.children('.targetValue').html(50);\n                     //createQtip(parent);\n                }\n                else if(value === \"kmh\"){\n                     $(\"#sliderIntervallIntensity\" ).slider({\n                        disabled: false, range: \"min\",\n                        step: 5,\n                        min: 0, max: 70, value: 20,\n                        slide: function(event, ui){ \n                             parent.children('.targetValue').html(ui.value);\n                        },\n                        stop: function(event, ui) { \n                            $(this).hide();\n                        }\n                     });\n                     parent.children('.targetValue').html(50);\n                     //createQtip(parent);\n                }\n                else if(value === \"range\"){\n                    $(\"#sliderIntervallIntensity\" ).slider({\n                        disabled: false, range: true,\n                        step: 5,\n                        min: 0, max: 600,\n                        values: [100, 300],\n                        slide: function(event, ui){ \n                            var minValueHtml = '<span class=\"intervallMin\" seconds=\"' + ui.values[0] + '\">' + Math.floor(ui.values[0] / 60) +\":\" + (ui.values[0] - (Math.floor(ui.values[0] / 60) * 60)) + '</span>';\n                            var maxValueHtml = '<span class=\"intervallMax\" seconds=\"' + ui.values[1] + '\">' + Math.floor(ui.values[1] / 60) +\":\" + (ui.values[1] - (Math.floor(ui.values[1] / 60) * 60)) + '</span>';\n                            parent.children('.targetValue').html(minValueHtml + \" - \" + maxValueHtml + \" min\");\n\n                        },\n                        stop: function(event, ui) { \n                            if(!applicationVariables.intervallSliderUsed){\n                                applicationVariables.intervallSliderUsed = true;\n                            }\n                            else{\n                               applicationVariables.intervallSliderUsed = false;\n                               $(this).hide(); \n                            }\n                            \n                        }\n                    });\n                    var minValueHtml = '<span class=\"intervallMin\" seconds=\"' + 30 + '\">' + Math.floor(30 / 60) +\":\" + (30 - (Math.floor(30 / 60) * 60)) + '</span>';\n                    var maxValueHtml = '<span class=\"intervallMax\" seconds=\"' + 105 + '\">' + Math.floor(105 / 60) +\":\" + (105 - (Math.floor(105 / 60) * 60)) + '</span>';\n                    parent.children('.targetValue').html(minValueHtml + \" - \" + maxValueHtml + \" min\");       \n                }\n                else{ //none\n                   $(\"#sliderIntervallIntensity\" ).slider({disabled: true});\n                   sliderContainer.hide();\n                   parent.children('.targetValue').html(\"\");\n                }\n                \n            });\n        \n        }\n       \n       refreshSlider();\n        \n        //addIntervallInput(\"bpm\", \"200\", \"m\", \"100\", \"totototot\", \"\", \"\");\n        //addIntervallInput(\"range\", \"200\", \"m\", \"100\", \"totototot\", \"30\", \"120\");\n        //addIntervallInput(\"%\", \"70\", \"s\", \"100\", \"totototot\", \"\", \"\");\n        \n        $('#addAnotherIntervall').click(function(){\n            addIntervallInput(\"\", \"\", \"\", \"0\", \"\", \"\", \"\");\n            //addIntervallInput();\n            //createIntervallModel();\n            \n        });\n\n\t\t\n\t\t//hover states on the static widgets\n\t\t$('#dialog_link, ul#icons li').hover(\n\t\t\tfunction() { $(this).addClass('ui-state-hover'); }, \n\t\t\tfunction() { $(this).removeClass('ui-state-hover'); }\n\t\t);\n\n\t\t//Button pushed in Distance type\n\t\t$(\"#radio3\").click(function(event) { \n\t\t\tvar option = $('input[type=radio][name=radio3]:checked').attr('id');\n    \t\tif (option == 'radioKiloMeters'){\n\t\t\t\tdocument.getElementById('bigLabel').innerHTML = \" km\";\n\t\t\t\tdocument.getElementById('smallLabel').innerHTML = \" m\";\n\t\t\t}else{\n\t\t\t\tdocument.getElementById('bigLabel').innerHTML = \"hour\";\n\t\t\t\tdocument.getElementById('smallLabel').innerHTML = \"min\";\n\t\t\t}\n\t\t});\n\n\t\t//Data validation and compilation before submitting to server\n\t\t$(\"#push\").click(function(event) {\n\t\t\n            if($('#cellSelection').val() === 'yourself'){\n                postWorkout(event);\n            }\n            else{\n                postCellWorkout(event);\n            }\n        \n\t\t});\n\n\t\t\n\n        ///// ------------- MAPPING NAVIGATION BUTTONS -----------------------\n        //\n        //\n        // ---------------------------------------------------------------------\n        \n        $('#goToSocial').click(function(){\n            applicationVariables.calendarMode = \"user\";\n            applicationVariables.feedPage = 2;\n            moveUI('Social'); \n            \n        });\n        \n        $('#goToMap').click(function(){\n            applicationVariables.calendarMode = \"user\";\n            refreshDropdown();\n            moveUI('Map'); \n            \n        });\n        \n        $('#goToPlanner').click(function(){\n            applicationVariables.calendarMode = \"user\";\n            populateCellDropList();\n            refreshDropdown();\n            moveUI('Create'); \n            \n        });\n        \n        $('#goToStats').click(function(){\n            moveUI('Stats');\n        });\n        \n        $('#goToConfiguration').click(function(){\n            $('#userOptionDialog').dialog(\"open\");\n            \n        });\n        \n        $(\"#goToSearch\").click(function(){\n            $('#searchDialog').dialog(\"open\");\n            \n        });\n        \n        //Attribute page set to 1 for every new search\n        $('#moreSearchResults').click(function(){\n            var page = parseInt($(this).attr('page'));\n            page++;    \n            $(this).attr('page', page);\n            executeSearch(page);\n        });\n        \n        \n        $('#inviteFbFriends').click(function(){\n            inviteFriends();\n            \n        });\n        \n        \n        //This is to add a button to the calendar\n        function addCalButton(where, text, id) {\n            var my_button = '<span class=\"fc-header-space\"></span>' +\n                    '<span id=\"' + id + '\" class=\"cal-button\"><span class=\"ui-icon ui-icon-arrow-4-diag\"></span></span>';\n            $(\"td.fc-header-\" + where).append(my_button);\n            $(\"#\" + id).button();\n        }\n        \n        addCalButton(\"right\", \"Hello\", \"enlargeCalendar\");\n        \n        $('#enlargeCalendar').live('click', function(){\n            moveUI('largeCalendar'); \n            \n        });\n\t\t        \n        //Will take a JSON for string argumen (array of maps) and will populate drop list\n        var populateDroplist = function(dropdownName, string){\n            \n            //Clear old guy\n            $('#' + dropdownName)\n                .find('option')\n                .remove()\n                .end()\n                //.append('<option value=\"whatever\">text</option>')\n                //.val('whatever')\n            ;\n            \n            var droplistHtml = \"<option value='none'>No Course</option>\" ;\n            var array = {};\n            var obj = jQuery.parseJSON(string);\n            $(droplistHtml).appendTo(\"#\" + dropdownName);\n  \n            for(i = 0; i < obj.length;i++){\n                droplistHtml = \"<option value='\" +  obj[i].realId + \"' distance='\" +obj[i].distance + \"'  staticUrl='\"+ obj[i].staticUrl +\"'>\"+ obj[i].name+\"</option>\";\n                $(droplistHtml).appendTo(\"#\" + dropdownName);\n            } \n        }\n        \n         function getJson(url, callback){\n\n            $.get(url, function(data){\n                callback(data);   \n            }, \"json\");\n        }\n        \n        \n        //To send a json use this, make sure received json follows convention\n        //convention on param with success: true or false and the message: \"blabla\"\n        var postJson = function(theJson, theUrl, callback){\n            \n            $.ajax({\n                url: theUrl,\n                type: \"POST\",\n                dataType: \"json\",\n                data: theJson,\n                contentType: \"application/json\",\n                cache: false,\n                timeout: 5000,\n                complete: function() {\n                    //called when complete\n                    \n                    Notifier.info('Saving ...');\n\n                },\n\n                success: function(data) {\n                    //var res =jQuery.parseJSON(data);\n                    //callback('Sending: ' + data);\n                    if(data.success){\n                        Notifier.success(data.message);\n                         callback(data.success);\n                    }\n                    else{\n                       Notifier.error(data.message); \n                       callback(data.success);\n                    }\n                },\n\n                error: function() {\n                    //callback('Operation failed');\n                    Notifier.error('Could not send data to server');\n                     callback(false);\n                },\n            });\n    \n        }\n        \n        //will remove everything in the calendar then\n        //takes the current displayed month and go gets the data\n        updateCalendar = function (callback){\n            \n            var url;\n            var d = $('#fullcalendar').fullCalendar('getDate');\n                //alert(d);\n                \n            var month = d.getMonth() + 1;\n            var year = d.getFullYear();\n\n            $('#fullcalendar').fullCalendar( 'removeEvents' );\n            \n            if(applicationVariables.calendarMode === \"cell\"){\n                url = \"/cell/event/\" + year + \"/\" + month + \"/\" + applicationVariables.currentCell;\n            }\n            else{  //Users calendar data\n                url = \"/event/\" + year + \"/\" + month + \"/\" + authId;    \n            }\n            \n            $.getJSON(url, function(data) {\n                if(data.success){\n                    $('#fullcalendar').fullCalendar( 'addEventSource', data.message );\n                    //console.log(data);\n                    callback(data.message);\n                }\n                else{\n                    callback('Error');\n                //something wrong\n                //Notifier.success(data.message);\n                }   \n            }); \n            \n        }\n\n        var refreshDropdown = function(){\n         \n            getJson(getParcourList, function(data){\n               //will populate dropdown with parcour list\n               populateDroplist(\"dropdownMap\", data);\n               populateDroplist(\"parcourSelection\", data);\n               \n            });  \n        }\n       \n        var timeStringToSeconds = function(string, callback){\n            var splittedArray = string.split(\":\");\n            callback((parseInt(splittedArray[0]) * 60) + parseInt(splittedArray[1]));\n        }\n\n        var printArray = function(array, callback){\n            var finalHtml =\"\";\n            if(array.length === 0){\n                callback(finalHtml);\n            }\n            else{\n                for(i = 0; i < array.length; i++){\n                    finalHtml = finalHtml + array[i]; \n                    \n                    \n    \n                }\n                callback(finalHtml);\n            }\n        }\n\n        var grabNewCellInput = function(){\n            \n            var object = {\n                name         : $(\"input[type=text][id=cellName]\").val(),\n                location     : $(\"#cellLocationSelect\").val(),\n\t            description  : $(\"#cellDescription\").val(),\n                isPrivate    : $('#isCellOnInvite').is(':checked'),\n                isCoach      : $('#isCellCoach').is(':checked')\n            }\n            return object;\n            \n        }\n        \n        var loadDynamicQtip = function(a, descTable){\n            for(i = 0; i <= a; i++){  \n                $(\"#qtipIntervall\" + i).qtip({\n                    content: {\n                        text: descTable[i]\n                    },\n                    show: {\n                        event: 'click', \n                        ready: false \n                    },\n                    hide: 'click',\n                    style: {\n                        widget: true \n                    }\n                });  \n            }\n        }\n        \n        $('#createCell').click(function(){\n            $('#createCellDialog').dialog('open');  \n            \n        });\n        \n        \n        \n        $('.cellCard').live('click',function(){\n            var id = $(this).attr('refId');\n           $.getJSON('/cell/details/' + id, function(data) {\n                if(data.success){\n                    if(data.message === 'This cell is private'){\n                        UILoadNewState('emptyView');\n                        document.getElementById('emptyView').innerHTML = '<span style=\"font-family: impact; font-size: 20px;\">This cell is invite only. Sorry.</span>';\n                    }else{\n                        //Set the users profile to coach mode, so we can display a custom coach UI\n                        //alert(data.message.owner.id + \" vs \" + data.message.isCoach);\n                        //alert(typeof(data.message.owner.id) + \" vs \" + typeof(authId));\n                        if(data.message.owner.id.toString() === authId && data.message.isCoach){\n                            applicationVariables.coachMode = true;\n                        }\n                        else{\n                            applicationVariables.coachMode = false;\n                        }\n                        applicationVariables.calendarMode = \"cell\";\n                        applicationVariables.currentCell = id;\n                        initCellView(data.message);\n                        UILoadNewState('cellView');\n                        updateCalendar();\n                    }\n                }\n                else{\n                    //something wrong\n                    Notifier.success(data.message);\n                }\n           });\n        });\n        \n        $('.cellLink').live('click',function(){\n           var id = $(this).attr('refId');\n           $.getJSON('/cell/details/' + id, function(data) {\n                if(data.success){\n                    if(data.message === 'This cell is private'){\n                        UILoadNewState('emptyView');\n                        document.getElementById('emptyView').innerHTML = '<span style=\"font-family: impact; font-size: 20px;\">This cell is invite only. Sorry.</span>';\n                    }else{\n                        //Set the users profile to coach mode, so we can display a custom coach UI\n                        if(data.message.owner.id.toString() === authId && data.message.isCoach){\n                            applicationVariables.coachMode = true;\n                        }\n                        else{\n                            applicationVariables.coachMode = false;\n                        }\n                        applicationVariables.calendarMode = \"cell\";\n                        applicationVariables.currentCell = id;\n                        initCellView(data.message);\n                        UILoadNewState('cellView');\n                        updateCalendar();\n                    }\n                }\n                else{\n                    //something wrong\n                    Notifier.success(data.message);\n                }\n           });  \n        });\n         \n        $('.cellMessage').live('click',function(){\n            var id = $(this).attr('refId');\n            $.getJSON('/cell/details/' + id, function(data) {\n                if(data.success){\n                    if(data.message === 'This cell is private'){\n                        UILoadNewState('emptyView');\n                        document.getElementById('emptyView').innerHTML = '<span style=\"font-family: impact; font-size: 20px;\">This cell is invite only. Sorry.</span>';\n                    }else{\n                        //Set the users profile to coach mode, so we can display a custom coach UI\n                        if(data.message.owner.id.toString() === authId && data.message.isCoach){\n                            applicationVariables.coachMode = true;\n                        }\n                        else{\n                            applicationVariables.coachMode = false;\n                        }\n                        applicationVariables.calendarMode = \"cell\";\n                        applicationVariables.currentCell = id;\n                        initCellView(data.message);\n                        UILoadNewState('cellView');\n                        updateCalendar();\n                    }\n                }\n                else{\n                    //something wrong\n                    Notifier.success(data.message);\n                }\n           });\n        });\n        \n        //Button found on profile snippet, click on profile mini pic\n        $('.btn_viewProfile').live('click',function(){\n           var id = $(this).attr('userid');\n           applicationVariables.calendarMode = \"user\";\n           initUsersProfile(id);\n           UILoadNewState('profileView');\n           $('#friendPic' + id).qtip(\"api\").destroy();\n            \n        });\n        \n        \n        $('.cellNotificationMessage').live('click',function(){\n           var id = $(this).attr('userId');\n           applicationVariables.calendarMode = \"user\";\n           initUsersProfile(id);\n           UILoadNewState('profileView');\n        });\n        \n        $(\".selectableinviteFriendList\").live('click', function(){\n            if($(this).attr('select') === \"no\"){\n                $(this).attr('select', \"yes\"); \n                $(this).css('border', 'solid 4px #00A300');\n                applicationVariables.selectedElements++;\n            }\n            else{\n                $(this).attr('select', \"no\"); \n                $(this).css('border', 'solid 0px white');\n                applicationVariables.selectedElements--;\n            }\n        });\n        \n        $('.cellNotificationNewWorkout').live('click',function(){\n             initView(workout, event); \n        });\n        \n        //!!!!!----------------------------------------------------------------\n        //\n        //           Message Posting\n        //\n        //!!!!!!---------------------------------------------------------------\n        \n        $('#postCellComment').live('click', function(){\n           \n           var comment = $('#cellCommentInput').val();\n           var cell = applicationVariables.currentCell;\n           \n           if(comment.length < 160 && comment !== \"Post a comment ...\" && comment.length > 10){\n               $.getJSON(postCellComment + \"/\" + cell + \"/\" + comment , function(data) {\n                    if(data.success){\n                        var id = $(this).attr('refId');\n                        $.getJSON('/cell/details/' + cell, function(data) {\n                            if(data.success){\n                                if(data.message === 'This cell is private'){\n                                    UILoadNewState('emptyView');\n                                    document.getElementById('emptyView').innerHTML = '<span style=\"font-family: impact; font-size: 20px;\">This cell is invite only. Sorry.</span>';\n                                    $('#cellCommentInput').val('Post a comment ...');\n                                }else{\n                                    applicationVariables.calendarMode = \"cell\";\n                                    initCellView(data.message);\n                                    //UILoadNewState('cellView');\n                                    //updateCalendar();\n                                    $('#cellCommentInput').val('Post a comment ...');\n                                }\n                            }\n                            else{\n                                //something wrong\n                                Notifier.success(data.message);\n                                $('#cellCommentInput').val('Post a comment ...');\n                            }\n                        });\n                    }\n                    else{\n                        \n                    }\n               });\n           }\n           else{\n               Notifier.error('Message too long or short or invalid.');\n           }\n        });\n        \n        \n        $('.postWorkoutComment').live('click', function(){\n            \n            var message = $('#workoutCommentInput').val();\n            \n            if(message.length > 10)\n                $.getJSON(postWorkoutMessage + $('#workoutMessageInput').attr('workoutid') + \"/\" + message , function(data) {\n                    if(data.success){\n                        Notifier.success('Message sent');\n                        $('#workoutCommentInput').val('Post a comment ...');\n                        //get reqest returns new updated workout, then we udpdate the message feed\n                        if(data.message.feed.length > 0){\n                            renderWorkoutMessages(data.message.feed, function(html){\n                                document.getElementById('comments').innerHTML = html;\n                                $('.removeWorkoutComment').die();\n                                $('.removeWorkoutComment').live('click', function(){\n                                    var parent = $(this).parent().parent();\n                                    $.getJSON(removeWorkoutComment +data.message._id + \"/\" + parent.attr('messageId'), function(data) {\n                                        if(data.success){\n                                            parent.remove();\n                                            if(data.message.feed.length === 1){\n                                                 document.getElementById('comments').innerHTML = \"<br> No Comments yet ...\"   \n                                            }\n                                        }\n                                        else{\n                                            \n                                        }                    \n                                    });\n                                });\n                            });\n                        }\n\n                    }\n                    else{\n                        Notifier.error(data.mes);\n                    }\n                \n                });\n            else{\n                Notifier.error('Message to small');    \n                \n            }\n\n        });\n\n        \n        /*\n        $('.cellNotificationNewWorkout').live('click', function(){\n           var workoutId = $(this).attr('workoutId');\n           $.getJSON('/workout/' + workoutId, function(data) {\n                initView(data)\n                moveUI('View');\n            });\n        });*/\n        \n        //!!!!--------------------------------------------------------------\n        //\n        //    Dropdown logic\n        //\n        //!!!!--------------------------------------------------------------\n        \n        var populateCellDropList = function(){\n            \n            //clear select\n            $('#cellSelection option').each(function(index, option) {\n                $(option).remove();\n            });\n            \n            //Add back basic\n            droplistHtml = \"<option value='yourself'>Yourself</option>\";\n            $(droplistHtml).appendTo(\"#cellSelection\");\n            \n            $.getJSON(getAllCell, function(data) {\n                if(data.success){\n                    if(data.message !== \"You are not part of any cells.\"){\n                        for(i = 0; i < data.message.length;i++){\n                            droplistHtml = \"<option value='\" +  data.message[i].cellDetails + \"'>\"+ data.message[i].name+\"</option>\";\n                            $(droplistHtml).appendTo(\"#cellSelection\");\n                        } \n                    }\n                }\n                else{\n                //something wrong\n \n                }   \n            });  \n        }\n        \n        var updateUnreadNotifications = function(){\n            \n            $.getJSON(getUnreadNotification, function(res) {\n                \n                if(res.message !== 0){\n                    $(\"#goToSocial\").qtip({\n                        content: {\n                            text: res.message + ' new notifications'\n                        },\n                        show: {\n                            event: false, \n                            ready: true\n                        },\n                        position: {\n                            my: 'left center', // Use the corner...\n                            at: 'right center' // ...and opposite corner\n                        },\n                        hide: false,\n                        style: {\n                            widget: true \n                        }\n                    }); \n                }\n            });\n            \n        }\n        \n        \n        function toMeters(km, m, callback){\n            if(m === \"\" && km === \"\"){\n                callback(0);\n            }\n            else if(km === \"\"){\n                callback(parseInt(m)); \n            }\n            else if(m === \"\"){\n                callback((parseInt(km) * 1000)); \n            }\n            else{\n                callback((parseInt(km) * 1000) + parseInt(m)); \n            } \n        }\n        \n        function timeToSec(m, s, callback){\n            if(s === \"\" && m === \"\"){\n                callback(0);\n            }\n            else if(m === \"\"){\n                 callback(parseInt(s));\n            }\n            else if(s === \"\"){\n                 callback(60*parseInt(m)); \n            }\n            else{\n                 callback((60*parseInt(m)) + parseInt(s));\n            }\n              \n            \n        }\n        \n        //Menu in cell view\n        $(\"#cellOptionsButton\").qtip({\n            content: {\n                text: $(\"#viewCellOptionsContent\").html()\n            },\n            show: {\n                event: 'click', \n            },\n            position: {\n                my: 'left center', // Use the corner...\n                at: 'right center' // ...and opposite corner\n            },\n            hide: {\n                event: 'click', \n            },\n            style: {\n                widget: true \n            },\n            position: {\n                my: 'top center',\n                at: 'bottom center'\n            },\n            events: {\n                render: function(event, api) {\n                    api.elements.tooltip.click(api.hide);\n                }\n            }\n        }); \n        \n        $('#markRead').click(function(){\n            $.getJSON(resetNotificationCount, function(res) {\n               $(\"#goToSocial\").qtip(\"destroy\");\n            }); \n        });\n        \n        $('#getMoreNews').click(function(){\n            $.getJSON(getNotfication + \"/\" + applicationVariables.feedPage, function(data) {\n                if(data.success){\n                    renderNotifications(data.message, false);\n                    applicationVariables.feedPage++;\n                }\n                else{\n                    //something wrong\n                    Notifier.success(data.message);\n                }   \n            });   \n        });\n        \n        $('#descriptionInput').focus(function(){\n            if($(this).val() == \"Enter a description for this workout\"){\n                $(this).val(\"\");\n             }\n        });\n        $('#descriptionInput').blur(function(){\n              if($(this).val() == \"\" || $(this).val() == \"Enter a description for this workout\"){\n                  $(this).val(\"Enter a description for this workout\");\n              }\n        });\n        \n        \n        //  !!!!!!-_-_-_-_-_- Drag and drop code -_-_-_-_-_- !!!!!!\n        \n        $('#Create').droppable({\n    \t\taccept: \".fc-event\",\n            drop: function( event, ui ) {\n\t\t\t    if(applicationVariables.droppedWorkoutId !== \"\"){\n                    //alert(applicationVariables.droppedWorkoutId);\n                    ui.draggable.draggable({ revert: true });\n                    populateTemplate(applicationVariables.droppedWorkoutId);\n                    applicationVariables.droppedWorkoutId = \"\";\n                    $('#drophere').hide();\n\t\t\t    }\n                \n\t\t\t}\n\t\t});\n        \n        $('body').droppable({\n        \taccept: \".fc-event\",\n            drop: function( event, ui ) {\n                ui.draggable.draggable({ revert: true });\n                applicationVariables.droppedWorkoutId = \"\";\n                $('#drophere').hide();\n\t\t\t}\n\t\t});\n\n\n        initHeaderBar();\n       \n//END OF MODULE FUNCTIONS\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":65488}]],"length":65488}
